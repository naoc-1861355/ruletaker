{"json_class": "Example", "id": "ruletaker-problog-1", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'rabbit'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  blue('rabbit') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( young 'bear' )", "+ ( rough 'mouse' )", "+ ( needs 'bald_eagle' 'mouse' )", "+ ( chases 'dog' 'mouse' )", "[ + ( kind X ) ] -> + ( green X )", "+ ( kind 'cow' )", "[ + ( eats X 'mouse' ) , + ( round X ) ] -> + ( green X )", "+ ( eats 'bald_eagle' 'squirrel' )", "+ ( green 'tiger' )", "+ ( sees 'squirrel' 'cat' )", "[ + ( young X ) ] -> + ( blue X )", "+ ( visits 'rabbit' 'cow' )", "[ + ( sees X 'mouse' ) ] -> + ( round X )", "+ ( visits 'squirrel' 'tiger' )", "+ ( cold 'bald_eagle' )", "[ + ( needs X 'cow' ) ] -> + ( nice X )", "+ ( eats 'tiger' 'cow' )", "+ ( visits 'rabbit' 'squirrel' )", "+ ( visits 'tiger' 'dog' )"], "assertion_statement": "+ ( blue 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Squirrel sees cat.", "Tiger visits dog.", "Tiger eats cow.", "Mouse is rough.", "Dog chases mouse.", "Cow is kind.", "Rabbit visits cow.", "Squirrel visits tiger.", "Bald eagle needs mouse.", "Bald eagle eats squirrel.", "Rabbit visits squirrel.", "Tiger is green.", "Bear is young.", "Bald eagle is cold.", "If X needs cow then X is nice.", "If X is young then X is blue.", "If X sees mouse then X is round.", "If X eats mouse or X is round then X is green.", "If X is kind then X is green."], "assertion_statement": "Rabbit is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('squirrel', 'cat').", "1.0::visits('tiger', 'dog').", "1.0::eats('tiger', 'cow').", "1.0::rough('mouse').", "1.0::chases('dog', 'mouse').", "1.0::kind('cow').", "1.0::visits('rabbit', 'cow').", "1.0::visits('squirrel', 'tiger').", "1.0::needs('bald_eagle', 'mouse').", "1.0::eats('bald_eagle', 'squirrel').", "1.0::visits('rabbit', 'squirrel').", "1.0::green('tiger').", "1.0::young('bear').", "1.0::cold('bald_eagle').", "1.0::nice(X) :- needs(X, 'cow').", "1.0::blue(X) :- young(X).", "1.0::round(X) :- sees(X, 'mouse').", "1.0::green(X) :- eats(X, 'mouse'); round(X).", "1.0::green(X) :- kind(X)."], "assertion_statement": "query(blue('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-2", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'dog'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'mouse'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  green('mouse') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( eats 'squirrel' 'squirrel' )", "[ + ( likes X 'bear' ) ] -> + ( big X )", "+ ( chases 'cat' 'mouse' )", "+ ( sees 'tiger' 'dog' )", "+ ( needs 'tiger' 'lion' )", "+ ( cold 'dog' )", "+ ( likes 'cat' 'squirrel' )", "[ + ( sees X 'tiger' ) ] -> + ( green X )", "+ ( red 'rabbit' )", "+ ( nice 'bear' )"], "assertion_statement": "+ ( green 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit is red.", "Cat likes squirrel.", "Squirrel eats squirrel.", "Bear is nice.", "Tiger needs lion.", "Tiger sees dog.", "Cat chases mouse.", "Dog is cold.", "If X likes bear then X is big.", "If X sees tiger then X is green."], "assertion_statement": "Mouse is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::red('rabbit').", "1.0::likes('cat', 'squirrel').", "1.0::eats('squirrel', 'squirrel').", "1.0::nice('bear').", "1.0::needs('tiger', 'lion').", "1.0::sees('tiger', 'dog').", "1.0::chases('cat', 'mouse').", "1.0::cold('dog').", "1.0::big(X) :- likes(X, 'bear').", "1.0::green(X) :- sees(X, 'tiger')."], "assertion_statement": "query(green('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-3", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bear'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  rough('bald_eagle') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( big 'rabbit' )", "+ ( needs 'bald_eagle' 'tiger' )", "+ ( rough 'lion' )", "+ ( blue 'tiger' )", "+ ( sees 'bald_eagle' 'lion' )", "+ ( likes 'cow' 'dog' )", "[ + ( kind X ) , + ( rough X ) ] -> + ( green X )", "+ ( sees 'bald_eagle' 'tiger' )", "+ ( chases 'bear' 'cat' )", "+ ( sees 'lion' 'cow' )", "+ ( visits 'cow' 'cow' )", "[ + ( young X ) ] -> + ( young X )", "[ + ( chases X 'cat' ) ] -> + ( rough X )", "+ ( eats 'dog' 'mouse' )", "+ ( young 'rabbit' )", "+ ( sees 'bald_eagle' 'bear' )", "+ ( rough 'cat' )"], "assertion_statement": "+ ( rough 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion sees cow.", "Tiger is blue.", "Dog eats mouse.", "Bald eagle sees bear.", "Bear chases cat.", "Bald eagle sees lion.", "Cow likes dog.", "Cat is rough.", "Cow visits cow.", "Bald eagle needs tiger.", "Lion is rough.", "Rabbit is big.", "Rabbit is young.", "Bald eagle sees tiger.", "If X chases cat then X is rough.", "If X is kind or X is rough then X is green.", "If X is young then X is young."], "assertion_statement": "Bald eagle is rough."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('lion', 'cow').", "1.0::blue('tiger').", "1.0::eats('dog', 'mouse').", "1.0::sees('bald_eagle', 'bear').", "1.0::chases('bear', 'cat').", "1.0::sees('bald_eagle', 'lion').", "1.0::likes('cow', 'dog').", "1.0::rough('cat').", "1.0::visits('cow', 'cow').", "1.0::needs('bald_eagle', 'tiger').", "1.0::rough('lion').", "1.0::big('rabbit').", "1.0::young('rabbit').", "1.0::sees('bald_eagle', 'tiger').", "1.0::rough(X) :- chases(X, 'cat').", "1.0::green(X) :- kind(X); rough(X).", "1.0::young(X) :- young(X)."], "assertion_statement": "query(rough('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-4", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'rabbit'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'rabbit'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'rabbit'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'cow'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'dog'"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'cat'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  green('cat') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'dog' 'mouse' )", "+ ( rough 'mouse' )", "+ ( young 'cow' )", "+ ( red 'rabbit' )", "+ ( sees 'bald_eagle' 'squirrel' )", "+ ( sees 'rabbit' 'tiger' )", "[ + ( needs X 'squirrel' ) ] -> + ( nice X )", "+ ( likes 'mouse' 'lion' )", "[ + ( green X ) ] -> + ( nice X )", "+ ( sees 'rabbit' 'cow' )", "+ ( visits 'lion' 'tiger' )", "+ ( eats 'lion' 'tiger' )", "+ ( big 'dog' )", "[ + ( sees X 'squirrel' ) ] -> + ( nice X )", "[ + ( chases X 'dog' ) ] -> + ( nice X )", "+ ( likes 'rabbit' 'squirrel' )", "+ ( needs 'bear' 'cow' )", "[ + ( eats 'dog' 'dog' ) ] -> + ( round 'dog' )", "+ ( chases 'cat' 'bear' )", "[ + ( green X ) ] -> + ( green X )"], "assertion_statement": "+ ( green 'cat' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit sees tiger.", "Lion eats tiger.", "Rabbit is red.", "Dog is big.", "Cat chases bear.", "Mouse is rough.", "Bald eagle sees squirrel.", "Dog likes mouse.", "Cow is young.", "Mouse likes lion.", "Rabbit sees cow.", "Lion visits tiger.", "Rabbit likes squirrel.", "Bear needs cow.", "If X is green then X is green.", "If X needs squirrel then X is nice.", "If X sees squirrel then X is nice.", "If X is green then X is nice.", "If dog eats dog then dog is round.", "If X chases dog then X is nice."], "assertion_statement": "Cat is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('rabbit', 'tiger').", "1.0::eats('lion', 'tiger').", "1.0::red('rabbit').", "1.0::big('dog').", "1.0::chases('cat', 'bear').", "1.0::rough('mouse').", "1.0::sees('bald_eagle', 'squirrel').", "1.0::likes('dog', 'mouse').", "1.0::young('cow').", "1.0::likes('mouse', 'lion').", "1.0::sees('rabbit', 'cow').", "1.0::visits('lion', 'tiger').", "1.0::likes('rabbit', 'squirrel').", "1.0::needs('bear', 'cow').", "1.0::green(X) :- green(X).", "1.0::nice(X) :- needs(X, 'squirrel').", "1.0::nice(X) :- sees(X, 'squirrel').", "1.0::nice(X) :- green(X).", "1.0::round('dog') :- eats('dog', 'dog').", "1.0::nice(X) :- chases(X, 'dog')."], "assertion_statement": "query(green('cat'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-5", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bear'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bald_eagle'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'rabbit'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bald_eagle'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'lion'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  nice('lion') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( eats 'bear' 'tiger' )", "+ ( cold 'cat' )", "[ + ( chases X 'cat' ) ] -> + ( nice X )", "+ ( sees 'bald_eagle' 'cat' )", "+ ( likes 'bald_eagle' 'rabbit' )", "[ + ( chases X 'bald_eagle' ) ] -> + ( rough X )", "+ ( eats 'squirrel' 'bald_eagle' )", "+ ( cold 'bald_eagle' )", "+ ( young 'rabbit' )", "[ + ( rough X ) ] -> + ( big X )", "+ ( likes 'bald_eagle' 'lion' )", "+ ( eats 'squirrel' 'mouse' )", "[ + ( visits X 'mouse' ) ] -> + ( green X )", "[ + ( green X ) ] -> + ( kind X )", "+ ( likes 'rabbit' 'lion' )", "+ ( chases 'cat' 'lion' )"], "assertion_statement": "+ ( nice 'lion' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bald eagle sees cat.", "Cat is cold.", "Cat chases lion.", "Bear eats tiger.", "Bald eagle likes rabbit.", "Rabbit likes lion.", "Bald eagle likes lion.", "Squirrel eats bald eagle.", "Rabbit is young.", "Squirrel eats mouse.", "Bald eagle is cold.", "If X visits mouse then X is green.", "If X is green then X is kind.", "If X chases cat then X is nice.", "If X chases bald eagle then X is rough.", "If X is rough then X is big."], "assertion_statement": "Lion is nice."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('bald_eagle', 'cat').", "1.0::cold('cat').", "1.0::chases('cat', 'lion').", "1.0::eats('bear', 'tiger').", "1.0::likes('bald_eagle', 'rabbit').", "1.0::likes('rabbit', 'lion').", "1.0::likes('bald_eagle', 'lion').", "1.0::eats('squirrel', 'bald_eagle').", "1.0::young('rabbit').", "1.0::eats('squirrel', 'mouse').", "1.0::cold('bald_eagle').", "1.0::green(X) :- visits(X, 'mouse').", "1.0::kind(X) :- green(X).", "1.0::nice(X) :- chases(X, 'cat').", "1.0::rough(X) :- chases(X, 'bald_eagle').", "1.0::big(X) :- rough(X)."], "assertion_statement": "query(nice('lion'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-6", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'mouse'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  kind('mouse') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( eats X 'mouse' ) ] -> + ( rough X )", "+ ( rough 'dog' )", "+ ( round 'dog' )", "+ ( round 'bald_eagle' )", "+ ( needs 'bald_eagle' 'mouse' )", "[ + ( visits X 'tiger' ) ] -> + ( big X )", "+ ( likes 'squirrel' 'dog' )", "+ ( sees 'cow' 'cat' )", "[ + ( visits X 'mouse' ) ] -> + ( red X )", "+ ( young 'tiger' )", "+ ( young 'lion' )", "+ ( young 'bald_eagle' )", "+ ( visits 'dog' 'squirrel' )", "[ + ( visits X 'lion' ) , + ( young X ) ] -> + ( red X )", "[ + ( needs X 'rabbit' ) ] -> + ( kind X )", "[ + ( rough X ) ] -> + ( cold X )", "+ ( needs 'mouse' 'bear' )", "+ ( chases 'lion' 'bald_eagle' )", "[ + ( chases X 'cow' ) , + ( nice X ) ] -> + ( green X )", "[ + ( needs X 'mouse' ) ] -> + ( blue X )", "+ ( likes 'lion' 'cow' )"], "assertion_statement": "+ ( kind 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion likes cow.", "Dog visits squirrel.", "Lion chases bald eagle.", "Bald eagle is young.", "Tiger is young.", "Lion is young.", "Cow sees cat.", "Dog is rough.", "Bald eagle needs mouse.", "Mouse needs bear.", "Squirrel likes dog.", "Dog is round.", "Bald eagle is round.", "If X chases cow or X is nice then X is green.", "If X needs rabbit then X is kind.", "If X visits tiger then X is big.", "If X needs mouse then X is blue.", "If X eats mouse then X is rough.", "If X is rough then X is cold.", "If X visits mouse then X is red.", "If X visits lion or X is young then X is red."], "assertion_statement": "Mouse is kind."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('lion', 'cow').", "1.0::visits('dog', 'squirrel').", "1.0::chases('lion', 'bald_eagle').", "1.0::young('bald_eagle').", "1.0::young('tiger').", "1.0::young('lion').", "1.0::sees('cow', 'cat').", "1.0::rough('dog').", "1.0::needs('bald_eagle', 'mouse').", "1.0::needs('mouse', 'bear').", "1.0::likes('squirrel', 'dog').", "1.0::round('dog').", "1.0::round('bald_eagle').", "1.0::green(X) :- chases(X, 'cow'); nice(X).", "1.0::kind(X) :- needs(X, 'rabbit').", "1.0::big(X) :- visits(X, 'tiger').", "1.0::blue(X) :- needs(X, 'mouse').", "1.0::rough(X) :- eats(X, 'mouse').", "1.0::cold(X) :- rough(X).", "1.0::red(X) :- visits(X, 'mouse').", "1.0::red(X) :- visits(X, 'lion'); young(X)."], "assertion_statement": "query(kind('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-7", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'rabbit'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  blue('bald_eagle') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( likes X 'squirrel' ) ] -> + ( blue X )", "+ ( sees 'dog' 'mouse' )", "[ + ( chases X 'squirrel' ) ] -> + ( kind X )", "+ ( eats 'bald_eagle' 'mouse' )", "+ ( likes 'bear' 'tiger' )", "+ ( needs 'cat' 'cat' )", "+ ( needs 'mouse' 'mouse' )", "+ ( needs 'lion' 'rabbit' )", "[ + ( young X ) ] -> + ( nice X )", "+ ( eats 'dog' 'mouse' )", "+ ( blue 'rabbit' )", "[ + ( chases X 'tiger' ) ] -> + ( red X )", "[ + ( green X ) ] -> + ( cold X )", "+ ( visits 'dog' 'rabbit' )", "+ ( nice 'bear' )"], "assertion_statement": "+ ( blue 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit is blue.", "Dog visits rabbit.", "Dog sees mouse.", "Cat needs cat.", "Dog eats mouse.", "Bald eagle eats mouse.", "Bear is nice.", "Bear likes tiger.", "Mouse needs mouse.", "Lion needs rabbit.", "If X is green then X is cold.", "If X chases squirrel then X is kind.", "If X likes squirrel then X is blue.", "If X chases tiger then X is red.", "If X is young then X is nice."], "assertion_statement": "Bald eagle is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::blue('rabbit').", "1.0::visits('dog', 'rabbit').", "1.0::sees('dog', 'mouse').", "1.0::needs('cat', 'cat').", "1.0::eats('dog', 'mouse').", "1.0::eats('bald_eagle', 'mouse').", "1.0::nice('bear').", "1.0::likes('bear', 'tiger').", "1.0::needs('mouse', 'mouse').", "1.0::needs('lion', 'rabbit').", "1.0::cold(X) :- green(X).", "1.0::kind(X) :- chases(X, 'squirrel').", "1.0::blue(X) :- likes(X, 'squirrel').", "1.0::red(X) :- chases(X, 'tiger').", "1.0::nice(X) :- young(X)."], "assertion_statement": "query(blue('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-8", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'squirrel'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'mouse'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  young('mouse') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( red 'lion' )", "[ + ( needs X 'cat' ) ] -> + ( big X )", "+ ( likes 'bear' 'squirrel' )", "[ + ( eats X 'mouse' ) ] -> + ( rough X )", "+ ( chases 'lion' 'lion' )", "+ ( big 'cat' )", "+ ( young 'dog' )", "+ ( big 'squirrel' )", "+ ( visits 'squirrel' 'lion' )", "+ ( eats 'mouse' 'mouse' )", "+ ( likes 'cow' 'mouse' )", "+ ( eats 'bald_eagle' 'squirrel' )", "+ ( nice 'cow' )", "+ ( blue 'bald_eagle' )", "[ + ( chases X 'cow' ) ] -> + ( rough X )", "+ ( needs 'cat' 'cat' )", "+ ( eats 'cat' 'cat' )", "[ + ( visits X 'dog' ) ] -> + ( young X )", "+ ( rough 'lion' )", "+ ( eats 'cat' 'squirrel' )", "[ + ( chases X 'squirrel' ) ] -> + ( young X )"], "assertion_statement": "+ ( young 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cat eats squirrel.", "Mouse eats mouse.", "Cat needs cat.", "Dog is young.", "Squirrel is big.", "Squirrel visits lion.", "Cow is nice.", "Cat is big.", "Lion chases lion.", "Cat eats cat.", "Bald eagle is blue.", "Cow likes mouse.", "Bald eagle eats squirrel.", "Lion is rough.", "Lion is red.", "Bear likes squirrel.", "If X needs cat then X is big.", "If X chases squirrel then X is young.", "If X chases cow then X is rough.", "If X visits dog then X is young.", "If X eats mouse then X is rough."], "assertion_statement": "Mouse is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::eats('cat', 'squirrel').", "1.0::eats('mouse', 'mouse').", "1.0::needs('cat', 'cat').", "1.0::young('dog').", "1.0::big('squirrel').", "1.0::visits('squirrel', 'lion').", "1.0::nice('cow').", "1.0::big('cat').", "1.0::chases('lion', 'lion').", "1.0::eats('cat', 'cat').", "1.0::blue('bald_eagle').", "1.0::likes('cow', 'mouse').", "1.0::eats('bald_eagle', 'squirrel').", "1.0::rough('lion').", "1.0::red('lion').", "1.0::likes('bear', 'squirrel').", "1.0::big(X) :- needs(X, 'cat').", "1.0::young(X) :- chases(X, 'squirrel').", "1.0::rough(X) :- chases(X, 'cow').", "1.0::young(X) :- visits(X, 'dog').", "1.0::rough(X) :- eats(X, 'mouse')."], "assertion_statement": "query(young('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-9", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  cold('bald_eagle') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( blue X ) ] -> + ( red X )", "+ ( visits 'bald_eagle' 'bald_eagle' )", "[ + ( eats X 'rabbit' ) ] -> + ( cold X )", "+ ( eats 'rabbit' 'tiger' )", "+ ( red 'bear' )", "+ ( round 'bald_eagle' )"], "assertion_statement": "+ ( cold 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bear is red.", "Bald eagle visits bald eagle.", "Rabbit eats tiger.", "Bald eagle is round.", "If X is blue then X is red.", "If X eats rabbit then X is cold."], "assertion_statement": "Bald eagle is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::red('bear').", "1.0::visits('bald_eagle', 'bald_eagle').", "1.0::eats('rabbit', 'tiger').", "1.0::round('bald_eagle').", "1.0::red(X) :- blue(X).", "1.0::cold(X) :- eats(X, 'rabbit')."], "assertion_statement": "query(cold('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-10", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'rabbit'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'rabbit'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'squirrel'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  round('squirrel') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( rough 'mouse' )", "+ ( likes 'cat' 'rabbit' )", "+ ( rough 'bear' )", "+ ( eats 'mouse' 'bear' )", "+ ( visits 'bald_eagle' 'squirrel' )", "+ ( big 'mouse' )", "+ ( cold 'lion' )", "+ ( big 'cow' )", "+ ( needs 'rabbit' 'mouse' )", "[ + ( eats X 'lion' ) ] -> + ( round X )", "+ ( kind 'cow' )", "+ ( visits 'squirrel' 'bald_eagle' )", "+ ( eats 'rabbit' 'rabbit' )", "+ ( likes 'bald_eagle' 'cat' )", "+ ( sees 'mouse' 'lion' )", "+ ( eats 'lion' 'cow' )", "[ + ( likes X 'rabbit' ) , + ( young X ) ] -> + ( rough X )", "+ ( red 'mouse' )", "[ + ( kind X ) ] -> + ( round X )"], "assertion_statement": "+ ( round 'squirrel' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow is big.", "Lion is cold.", "Mouse eats bear.", "Squirrel visits bald eagle.", "Mouse is big.", "Bald eagle visits squirrel.", "Rabbit eats rabbit.", "Mouse is rough.", "Lion eats cow.", "Cow is kind.", "Mouse is red.", "Rabbit needs mouse.", "Bald eagle likes cat.", "Bear is rough.", "Mouse sees lion.", "Cat likes rabbit.", "If X likes rabbit or X is young then X is rough.", "If X eats lion then X is round.", "If X is kind then X is round."], "assertion_statement": "Squirrel is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::big('cow').", "1.0::cold('lion').", "1.0::eats('mouse', 'bear').", "1.0::visits('squirrel', 'bald_eagle').", "1.0::big('mouse').", "1.0::visits('bald_eagle', 'squirrel').", "1.0::eats('rabbit', 'rabbit').", "1.0::rough('mouse').", "1.0::eats('lion', 'cow').", "1.0::kind('cow').", "1.0::red('mouse').", "1.0::needs('rabbit', 'mouse').", "1.0::likes('bald_eagle', 'cat').", "1.0::rough('bear').", "1.0::sees('mouse', 'lion').", "1.0::likes('cat', 'rabbit').", "1.0::rough(X) :- likes(X, 'rabbit'); young(X).", "1.0::round(X) :- eats(X, 'lion').", "1.0::round(X) :- kind(X)."], "assertion_statement": "query(round('squirrel'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-11", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bear'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'dog'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'squirrel'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  red('squirrel') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( cold X ) , + ( round X ) ] -> + ( nice X )", "+ ( likes 'tiger' 'dog' )", "[ + ( rough X ) , + ( blue X ) ] -> + ( nice X )", "+ ( likes 'tiger' 'bald_eagle' )", "+ ( nice 'dog' )", "[ + ( eats X 'lion' ) ] -> + ( red X )", "+ ( cold 'lion' )", "+ ( big 'cow' )", "+ ( sees 'lion' 'lion' )", "[ + ( young X ) ] -> + ( young X )", "+ ( cold 'squirrel' )", "+ ( round 'rabbit' )", "+ ( eats 'dog' 'rabbit' )", "[ + ( likes X 'squirrel' ) ] -> + ( blue X )", "[ + ( chases X 'tiger' ) , + ( green X ) ] -> + ( nice X )", "+ ( sees 'dog' 'bear' )", "[ + ( big X ) ] -> + ( rough X )", "+ ( eats 'cat' 'cat' )", "[ + ( chases X 'squirrel' ) ] -> + ( rough X )", "+ ( eats 'bear' 'dog' )", "+ ( round 'tiger' )", "+ ( needs 'mouse' 'tiger' )", "+ ( needs 'cow' 'squirrel' )"], "assertion_statement": "+ ( red 'squirrel' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow is big.", "Mouse needs tiger.", "Lion is cold.", "Lion sees lion.", "Cow needs squirrel.", "Squirrel is cold.", "Cat eats cat.", "Dog eats rabbit.", "Bear eats dog.", "Rabbit is round.", "Tiger is round.", "Tiger likes dog.", "Dog sees bear.", "Tiger likes bald eagle.", "Dog is nice.", "If X is rough or X is blue then X is nice.", "If X is young then X is young.", "If X is big then X is rough.", "If X likes squirrel then X is blue.", "If X chases squirrel then X is rough.", "If X is cold or X is round then X is nice.", "If X eats lion then X is red.", "If X chases tiger or X is green then X is nice."], "assertion_statement": "Squirrel is red."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::big('cow').", "1.0::needs('mouse', 'tiger').", "1.0::cold('lion').", "1.0::sees('lion', 'lion').", "1.0::needs('cow', 'squirrel').", "1.0::cold('squirrel').", "1.0::eats('cat', 'cat').", "1.0::eats('dog', 'rabbit').", "1.0::eats('bear', 'dog').", "1.0::round('rabbit').", "1.0::round('tiger').", "1.0::likes('tiger', 'dog').", "1.0::sees('dog', 'bear').", "1.0::likes('tiger', 'bald_eagle').", "1.0::nice('dog').", "1.0::nice(X) :- rough(X); blue(X).", "1.0::young(X) :- young(X).", "1.0::rough(X) :- big(X).", "1.0::blue(X) :- likes(X, 'squirrel').", "1.0::rough(X) :- chases(X, 'squirrel').", "1.0::nice(X) :- cold(X); round(X).", "1.0::red(X) :- eats(X, 'lion').", "1.0::nice(X) :- chases(X, 'tiger'); green(X)."], "assertion_statement": "query(red('squirrel'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-12", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bear'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'lion'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "-", "predicate": "sees", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "-", "predicate": "visits", "arguments": ["'dog'", "'dog'"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'rabbit'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  young('rabbit') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( needs 'tiger' 'cow' )", "+ ( visits 'bald_eagle' 'rabbit' )", "+ ( needs 'bald_eagle' 'dog' )", "[ + ( sees X 'tiger' ) ] -> + ( big X )", "[ + ( rough X ) ] -> + ( kind X )", "+ ( likes 'cow' 'lion' )", "+ ( chases 'lion' 'dog' )", "+ ( sees 'bald_eagle' 'dog' )", "[ - ( sees 'dog' 'mouse' ) ] -> - ( visits 'dog' 'dog' )", "+ ( young 'tiger' )", "+ ( needs 'cow' 'rabbit' )", "[ + ( nice X ) , + ( big X ) ] -> + ( young X )", "+ ( visits 'bear' 'cat' )", "+ ( rough 'cow' )", "+ ( nice 'lion' )", "+ ( eats 'cat' 'lion' )", "+ ( needs 'cat' 'cow' )", "[ + ( likes X 'cow' ) ] -> + ( red X )", "[ + ( needs X 'cat' ) ] -> + ( green X )"], "assertion_statement": "+ ( young 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow needs rabbit.", "Bald eagle visits rabbit.", "Lion is nice.", "Lion chases dog.", "Bald eagle needs dog.", "Tiger is young.", "Bear visits cat.", "Tiger needs cow.", "Bald eagle sees dog.", "Cow is rough.", "Cow likes lion.", "Cat needs cow.", "Cat eats lion.", "If X is rough then X is kind.", "If X is nice or X is big then X is young.", "If it is not true that dog sees mouse then it is not true that dog visits dog.", "If X sees tiger then X is big.", "If X likes cow then X is red.", "If X needs cat then X is green."], "assertion_statement": "Rabbit is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('cow', 'rabbit').", "1.0::visits('bald_eagle', 'rabbit').", "1.0::nice('lion').", "1.0::chases('lion', 'dog').", "1.0::needs('bald_eagle', 'dog').", "1.0::young('tiger').", "1.0::visits('bear', 'cat').", "1.0::needs('tiger', 'cow').", "1.0::sees('bald_eagle', 'dog').", "1.0::rough('cow').", "1.0::likes('cow', 'lion').", "1.0::needs('cat', 'cow').", "1.0::eats('cat', 'lion').", "1.0::kind(X) :- rough(X).", "1.0::young(X) :- nice(X); big(X).", "1.0::\\+visits('dog', 'dog') :- \\+sees('dog', 'mouse').", "1.0::big(X) :- sees(X, 'tiger').", "1.0::red(X) :- likes(X, 'cow').", "1.0::green(X) :- needs(X, 'cat')."], "assertion_statement": "query(young('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-13", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'squirrel'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'dog'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'lion'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  cold('lion') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( big 'rabbit' )", "+ ( needs 'bald_eagle' 'tiger' )", "+ ( chases 'bald_eagle' 'cow' )", "+ ( rough 'lion' )", "+ ( visits 'tiger' 'bald_eagle' )", "[ + ( cold X ) ] -> + ( red X )", "+ ( green 'bear' )", "[ + ( nice X ) , + ( blue X ) ] -> + ( red X )", "+ ( chases 'squirrel' 'squirrel' )", "+ ( nice 'dog' )", "+ ( sees 'bear' 'dog' )", "+ ( visits 'bald_eagle' 'bald_eagle' )", "[ + ( likes X 'mouse' ) , + ( big X ) ] -> + ( cold X )", "+ ( likes 'squirrel' 'bald_eagle' )", "+ ( needs 'tiger' 'tiger' )", "+ ( chases 'tiger' 'cat' )", "[ + ( green X ) ] -> + ( rough X )", "+ ( sees 'mouse' 'bald_eagle' )"], "assertion_statement": "+ ( cold 'lion' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bear sees dog.", "Mouse sees bald eagle.", "Tiger needs tiger.", "Tiger visits bald eagle.", "Bear is green.", "Bald eagle chases cow.", "Squirrel likes bald eagle.", "Tiger chases cat.", "Bald eagle visits bald eagle.", "Bald eagle needs tiger.", "Lion is rough.", "Rabbit is big.", "Squirrel chases squirrel.", "Dog is nice.", "If X is nice or X is blue then X is red.", "If X is cold then X is red.", "If X is green then X is rough.", "If X likes mouse or X is big then X is cold."], "assertion_statement": "Lion is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('bear', 'dog').", "1.0::sees('mouse', 'bald_eagle').", "1.0::needs('tiger', 'tiger').", "1.0::visits('tiger', 'bald_eagle').", "1.0::green('bear').", "1.0::chases('bald_eagle', 'cow').", "1.0::likes('squirrel', 'bald_eagle').", "1.0::chases('tiger', 'cat').", "1.0::visits('bald_eagle', 'bald_eagle').", "1.0::needs('bald_eagle', 'tiger').", "1.0::rough('lion').", "1.0::big('rabbit').", "1.0::chases('squirrel', 'squirrel').", "1.0::nice('dog').", "1.0::red(X) :- nice(X); blue(X).", "1.0::red(X) :- cold(X).", "1.0::rough(X) :- green(X).", "1.0::cold(X) :- likes(X, 'mouse'); big(X)."], "assertion_statement": "query(cold('lion'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-14", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "-", "predicate": "visits", "arguments": ["'tiger'", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "-", "predicate": "round", "arguments": ["'tiger'"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'tiger'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  rough('tiger') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( red 'cat' )", "+ ( round 'cow' )", "+ ( eats 'mouse' 'squirrel' )", "+ ( needs 'cow' 'bald_eagle' )", "+ ( nice 'dog' )", "+ ( visits 'mouse' 'bear' )", "[ - ( visits 'tiger' 'cow' ) ] -> - ( round 'tiger' )", "+ ( likes 'squirrel' 'bald_eagle' )", "+ ( needs 'tiger' 'tiger' )", "[ + ( nice X ) ] -> + ( rough X )"], "assertion_statement": "+ ( rough 'tiger' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger needs tiger.", "Cat is red.", "Squirrel likes bald eagle.", "Cow needs bald eagle.", "Mouse eats squirrel.", "Cow is round.", "Dog is nice.", "Mouse visits bear.", "If X is nice then X is rough.", "If it is not true that tiger visits cow then it is not true that tiger is round."], "assertion_statement": "Tiger is rough."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('tiger', 'tiger').", "1.0::red('cat').", "1.0::likes('squirrel', 'bald_eagle').", "1.0::needs('cow', 'bald_eagle').", "1.0::eats('mouse', 'squirrel').", "1.0::round('cow').", "1.0::nice('dog').", "1.0::visits('mouse', 'bear').", "1.0::rough(X) :- nice(X).", "1.0::\\+round('tiger') :- \\+visits('tiger', 'cow')."], "assertion_statement": "query(rough('tiger'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-15", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bear'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  rough('bald_eagle') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( red 'dog' )", "+ ( needs 'cow' 'cow' )", "+ ( young 'cow' )", "+ ( needs 'tiger' 'bear' )", "+ ( eats 'cow' 'rabbit' )", "+ ( cold 'rabbit' )", "+ ( nice 'bear' )", "+ ( round 'bear' )", "[ + ( needs X 'bear' ) , + ( cold X ) ] -> + ( kind X )", "+ ( visits 'cow' 'dog' )", "+ ( sees 'lion' 'rabbit' )", "+ ( eats 'bear' 'cow' )", "[ + ( chases X 'dog' ) ] -> + ( rough X )", "+ ( red 'cow' )", "+ ( needs 'cow' 'squirrel' )", "+ ( chases 'mouse' 'bald_eagle' )", "+ ( red 'tiger' )", "+ ( eats 'bald_eagle' 'bear' )", "[ + ( needs X 'cat' ) ] -> + ( green X )"], "assertion_statement": "+ ( rough 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion sees rabbit.", "Mouse chases bald eagle.", "Cow visits dog.", "Tiger needs bear.", "Cow needs squirrel.", "Tiger is red.", "Bear is round.", "Dog is red.", "Bear is nice.", "Cow is red.", "Rabbit is cold.", "Cow is young.", "Bear eats cow.", "Cow needs cow.", "Cow eats rabbit.", "Bald eagle eats bear.", "If X needs cat then X is green.", "If X needs bear or X is cold then X is kind.", "If X chases dog then X is rough."], "assertion_statement": "Bald eagle is rough."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('lion', 'rabbit').", "1.0::chases('mouse', 'bald_eagle').", "1.0::visits('cow', 'dog').", "1.0::needs('tiger', 'bear').", "1.0::needs('cow', 'squirrel').", "1.0::red('tiger').", "1.0::round('bear').", "1.0::red('dog').", "1.0::nice('bear').", "1.0::red('cow').", "1.0::cold('rabbit').", "1.0::young('cow').", "1.0::eats('bear', 'cow').", "1.0::needs('cow', 'cow').", "1.0::eats('cow', 'rabbit').", "1.0::eats('bald_eagle', 'bear').", "1.0::green(X) :- needs(X, 'cat').", "1.0::kind(X) :- needs(X, 'bear'); cold(X).", "1.0::rough(X) :- chases(X, 'dog')."], "assertion_statement": "query(rough('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-16", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  eats('squirrel','dog') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( red 'lion' )", "+ ( cold 'tiger' )", "+ ( eats 'cat' 'rabbit' )", "+ ( kind 'bear' )", "[ + ( likes X 'lion' ) ] -> + ( young X )", "+ ( needs 'dog' 'bear' )", "+ ( sees 'cow' 'tiger' )", "+ ( eats 'lion' 'dog' )", "+ ( blue 'dog' )", "[ + ( visits X 'cat' ) ] -> + ( rough X )", "+ ( visits 'cat' 'bear' )", "[ + ( chases X 'tiger' ) ] -> + ( nice X )", "[ + ( rough X ) ] -> + ( rough X )", "+ ( visits 'dog' 'rabbit' )", "+ ( red 'squirrel' )", "[ + ( needs X 'rabbit' ) ] -> + ( young X )", "+ ( visits 'cat' 'mouse' )"], "assertion_statement": "+ ( eats 'squirrel', 'dog' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger is cold.", "Bear is kind.", "Dog is blue.", "Dog needs bear.", "Dog visits rabbit.", "Cow sees tiger.", "Cat eats rabbit.", "Lion eats dog.", "Squirrel is red.", "Lion is red.", "Cat visits mouse.", "Cat visits bear.", "If X is rough then X is rough.", "If X likes lion then X is young.", "If X chases tiger then X is nice.", "If X needs rabbit then X is young.", "If X visits cat then X is rough."], "assertion_statement": "Squirrel eats dog."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::cold('tiger').", "1.0::kind('bear').", "1.0::blue('dog').", "1.0::needs('dog', 'bear').", "1.0::visits('dog', 'rabbit').", "1.0::sees('cow', 'tiger').", "1.0::eats('cat', 'rabbit').", "1.0::eats('lion', 'dog').", "1.0::red('squirrel').", "1.0::red('lion').", "1.0::visits('cat', 'mouse').", "1.0::visits('cat', 'bear').", "1.0::rough(X) :- rough(X).", "1.0::young(X) :- likes(X, 'lion').", "1.0::nice(X) :- chases(X, 'tiger').", "1.0::young(X) :- needs(X, 'rabbit').", "1.0::rough(X) :- visits(X, 'cat')."], "assertion_statement": "query(eats('squirrel', 'dog'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-17", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'bald_eagle'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  likes('dog','bald_eagle') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( rough 'lion' )", "+ ( likes 'lion' 'lion' )", "+ ( visits 'lion' 'bald_eagle' )", "+ ( needs 'cat' 'cat' )", "+ ( eats 'mouse' 'dog' )", "+ ( sees 'lion' 'bear' )", "[ + ( sees X 'rabbit' ) ] -> + ( red X )", "+ ( chases 'cow' 'squirrel' )"], "assertion_statement": "+ ( likes 'dog', 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cat needs cat.", "Lion visits bald eagle.", "Lion likes lion.", "Mouse eats dog.", "Lion sees bear.", "Lion is rough.", "Cow chases squirrel.", "If X sees rabbit then X is red."], "assertion_statement": "Dog likes bald eagle."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('cat', 'cat').", "1.0::visits('lion', 'bald_eagle').", "1.0::likes('lion', 'lion').", "1.0::eats('mouse', 'dog').", "1.0::sees('lion', 'bear').", "1.0::rough('lion').", "1.0::chases('cow', 'squirrel').", "1.0::red(X) :- sees(X, 'rabbit')."], "assertion_statement": "query(likes('dog', 'bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-18", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'squirrel'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  round('squirrel') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( sees 'cow' 'mouse' )", "+ ( visits 'dog' 'bald_eagle' )", "+ ( cold 'dog' )", "+ ( eats 'mouse' 'bear' )", "+ ( sees 'cow' 'squirrel' )", "+ ( needs 'dog' 'mouse' )", "[ + ( rough X ) , + ( blue X ) ] -> + ( young X )", "[ + ( visits X 'rabbit' ) ] -> + ( round X )", "+ ( visits 'squirrel' 'cow' )", "+ ( eats 'rabbit' 'cow' )", "+ ( big 'rabbit' )", "[ + ( likes X 'mouse' ) ] -> + ( kind X )", "[ + ( young X ) , + ( cold X ) ] -> + ( nice X )", "+ ( big 'dog' )", "[ + ( likes X 'cow' ) ] -> + ( kind X )", "[ + ( cold X ) ] -> + ( round X )", "[ + ( needs X 'tiger' ) ] -> + ( round X )", "+ ( needs 'cat' 'bald_eagle' )", "+ ( visits 'dog' 'dog' )", "+ ( visits 'cat' 'lion' )", "+ ( sees 'squirrel' 'rabbit' )"], "assertion_statement": "+ ( round 'squirrel' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow sees mouse.", "Dog visits dog.", "Dog is big.", "Squirrel sees rabbit.", "Cat visits lion.", "Dog needs mouse.", "Cat needs bald eagle.", "Dog visits bald eagle.", "Squirrel visits cow.", "Rabbit is big.", "Rabbit eats cow.", "Cow sees squirrel.", "Dog is cold.", "Mouse eats bear.", "If X is rough or X is blue then X is young.", "If X likes mouse then X is kind.", "If X visits rabbit then X is round.", "If X is young or X is cold then X is nice.", "If X likes cow then X is kind.", "If X is cold then X is round.", "If X needs tiger then X is round."], "assertion_statement": "Squirrel is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('cow', 'mouse').", "1.0::visits('dog', 'dog').", "1.0::big('dog').", "1.0::sees('squirrel', 'rabbit').", "1.0::visits('cat', 'lion').", "1.0::needs('dog', 'mouse').", "1.0::needs('cat', 'bald_eagle').", "1.0::visits('dog', 'bald_eagle').", "1.0::visits('squirrel', 'cow').", "1.0::big('rabbit').", "1.0::eats('rabbit', 'cow').", "1.0::sees('cow', 'squirrel').", "1.0::cold('dog').", "1.0::eats('mouse', 'bear').", "1.0::young(X) :- rough(X); blue(X).", "1.0::kind(X) :- likes(X, 'mouse').", "1.0::round(X) :- visits(X, 'rabbit').", "1.0::nice(X) :- young(X); cold(X).", "1.0::kind(X) :- likes(X, 'cow').", "1.0::round(X) :- cold(X).", "1.0::round(X) :- needs(X, 'tiger')."], "assertion_statement": "query(round('squirrel'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-19", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'mouse'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  sees('cat','cow') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( needs X 'bear' ) ] -> + ( nice X )", "+ ( visits 'rabbit' 'bear' )", "+ ( round 'cow' )", "+ ( sees 'bear' 'bald_eagle' )", "[ + ( needs X 'lion' ) ] -> + ( blue X )", "+ ( nice 'mouse' )", "+ ( likes 'dog' 'tiger' )", "+ ( kind 'cow' )", "+ ( sees 'mouse' 'mouse' )", "+ ( nice 'lion' )", "+ ( big 'squirrel' )", "+ ( cold 'squirrel' )"], "assertion_statement": "+ ( sees 'cat', 'cow' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bear sees bald eagle.", "Lion is nice.", "Rabbit visits bear.", "Squirrel is big.", "Cow is kind.", "Dog likes tiger.", "Squirrel is cold.", "Mouse is nice.", "Cow is round.", "Mouse sees mouse.", "If X needs bear then X is nice.", "If X needs lion then X is blue."], "assertion_statement": "Cat sees cow."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('bear', 'bald_eagle').", "1.0::nice('lion').", "1.0::visits('rabbit', 'bear').", "1.0::big('squirrel').", "1.0::kind('cow').", "1.0::likes('dog', 'tiger').", "1.0::cold('squirrel').", "1.0::nice('mouse').", "1.0::round('cow').", "1.0::sees('mouse', 'mouse').", "1.0::nice(X) :- needs(X, 'bear').", "1.0::blue(X) :- needs(X, 'lion')."], "assertion_statement": "query(sees('cat', 'cow'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-20", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bear'", "'dog'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bear'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  rough('bear') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( eats X 'cow' ) ] -> + ( red X )", "+ ( young 'squirrel' )", "[ + ( eats X 'lion' ) ] -> + ( red X )", "[ + ( green X ) ] -> + ( kind X )", "+ ( sees 'lion' 'dog' )", "[ + ( likes X 'bear' ) ] -> + ( red X )", "+ ( likes 'cat' 'squirrel' )", "[ + ( red X ) ] -> + ( cold X )", "+ ( chases 'tiger' 'mouse' )", "+ ( blue 'cow' )", "+ ( visits 'tiger' 'mouse' )", "[ + ( blue X ) ] -> + ( rough X )", "[ + ( needs X 'bald_eagle' ) ] -> + ( nice X )", "+ ( sees 'bald_eagle' 'bald_eagle' )", "+ ( eats 'rabbit' 'lion' )", "+ ( chases 'bear' 'dog' )", "+ ( needs 'cow' 'dog' )", "+ ( sees 'squirrel' 'dog' )", "+ ( likes 'mouse' 'mouse' )"], "assertion_statement": "+ ( rough 'bear' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit eats lion.", "Cat likes squirrel.", "Tiger chases mouse.", "Cow is blue.", "Squirrel sees dog.", "Lion sees dog.", "Tiger visits mouse.", "Bald eagle sees bald eagle.", "Mouse likes mouse.", "Cow needs dog.", "Squirrel is young.", "Bear chases dog.", "If X eats cow then X is red.", "If X is red then X is cold.", "If X likes bear then X is red.", "If X needs bald eagle then X is nice.", "If X is green then X is kind.", "If X eats lion then X is red.", "If X is blue then X is rough."], "assertion_statement": "Bear is rough."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::eats('rabbit', 'lion').", "1.0::likes('cat', 'squirrel').", "1.0::chases('tiger', 'mouse').", "1.0::blue('cow').", "1.0::sees('squirrel', 'dog').", "1.0::sees('lion', 'dog').", "1.0::visits('tiger', 'mouse').", "1.0::sees('bald_eagle', 'bald_eagle').", "1.0::likes('mouse', 'mouse').", "1.0::needs('cow', 'dog').", "1.0::young('squirrel').", "1.0::chases('bear', 'dog').", "1.0::red(X) :- eats(X, 'cow').", "1.0::cold(X) :- red(X).", "1.0::red(X) :- likes(X, 'bear').", "1.0::nice(X) :- needs(X, 'bald_eagle').", "1.0::kind(X) :- green(X).", "1.0::red(X) :- eats(X, 'lion').", "1.0::rough(X) :- blue(X)."], "assertion_statement": "query(rough('bear'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-21", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'dog'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'rabbit'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'rabbit'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  cold('rabbit') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'dog' 'mouse' )", "+ ( red 'dog' )", "+ ( likes 'lion' 'tiger' )", "+ ( chases 'lion' 'tiger' )", "[ + ( green X ) ] -> + ( kind X )", "+ ( visits 'cat' 'dog' )", "+ ( visits 'rabbit' 'bear' )", "+ ( likes 'mouse' 'rabbit' )", "+ ( needs 'lion' 'cat' )", "+ ( young 'dog' )", "+ ( blue 'rabbit' )", "[ + ( eats X 'dog' ) ] -> + ( young X )", "+ ( sees 'cat' 'cat' )", "[ + ( sees X 'squirrel' ) , + ( kind X ) ] -> + ( nice X )", "+ ( needs 'mouse' 'cow' )", "+ ( likes 'tiger' 'cow' )", "+ ( likes 'bear' 'bear' )", "[ + ( kind X ) ] -> + ( round X )", "+ ( eats 'tiger' 'cow' )", "+ ( chases 'dog' 'lion' )", "[ + ( chases X 'bald_eagle' ) ] -> + ( cold X )"], "assertion_statement": "+ ( cold 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit is blue.", "Cat visits dog.", "Mouse needs cow.", "Rabbit visits bear.", "Tiger eats cow.", "Lion likes tiger.", "Dog is young.", "Dog is red.", "Dog likes mouse.", "Tiger likes cow.", "Bear likes bear.", "Cat sees cat.", "Lion needs cat.", "Lion chases tiger.", "Dog chases lion.", "Mouse likes rabbit.", "If X eats dog then X is young.", "If X is kind then X is round.", "If X sees squirrel or X is kind then X is nice.", "If X is green then X is kind.", "If X chases bald eagle then X is cold."], "assertion_statement": "Rabbit is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::blue('rabbit').", "1.0::visits('cat', 'dog').", "1.0::needs('mouse', 'cow').", "1.0::visits('rabbit', 'bear').", "1.0::eats('tiger', 'cow').", "1.0::likes('lion', 'tiger').", "1.0::young('dog').", "1.0::red('dog').", "1.0::likes('dog', 'mouse').", "1.0::likes('tiger', 'cow').", "1.0::likes('bear', 'bear').", "1.0::sees('cat', 'cat').", "1.0::needs('lion', 'cat').", "1.0::chases('lion', 'tiger').", "1.0::chases('dog', 'lion').", "1.0::likes('mouse', 'rabbit').", "1.0::young(X) :- eats(X, 'dog').", "1.0::round(X) :- kind(X).", "1.0::nice(X) :- sees(X, 'squirrel'); kind(X).", "1.0::kind(X) :- green(X).", "1.0::cold(X) :- chases(X, 'bald_eagle')."], "assertion_statement": "query(cold('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-22", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'rabbit'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'lion'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  nice('lion') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( big 'tiger' )", "[ + ( blue X ) , + ( kind X ) ] -> + ( blue X )", "+ ( visits 'cow' 'bear' )", "+ ( likes 'bear' 'bear' )", "+ ( likes 'rabbit' 'tiger' )", "+ ( likes 'tiger' 'tiger' )", "+ ( needs 'lion' 'squirrel' )", "+ ( visits 'cat' 'bear' )", "+ ( cold 'bald_eagle' )", "+ ( visits 'cow' 'rabbit' )", "+ ( nice 'bald_eagle' )"], "assertion_statement": "+ ( nice 'lion' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit likes tiger.", "Tiger likes tiger.", "Lion needs squirrel.", "Bear likes bear.", "Cow visits bear.", "Bald eagle is nice.", "Cow visits rabbit.", "Tiger is big.", "Cat visits bear.", "Bald eagle is cold.", "If X is blue or X is kind then X is blue."], "assertion_statement": "Lion is nice."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('rabbit', 'tiger').", "1.0::likes('tiger', 'tiger').", "1.0::needs('lion', 'squirrel').", "1.0::likes('bear', 'bear').", "1.0::visits('cow', 'bear').", "1.0::nice('bald_eagle').", "1.0::visits('cow', 'rabbit').", "1.0::big('tiger').", "1.0::visits('cat', 'bear').", "1.0::cold('bald_eagle').", "1.0::blue(X) :- blue(X); kind(X)."], "assertion_statement": "query(nice('lion'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-23", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'squirrel'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'rabbit'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  kind('rabbit') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( sees X 'cow' ) ] -> + ( young X )", "+ ( needs 'squirrel' 'bear' )", "+ ( green 'bear' )", "+ ( sees 'bear' 'bald_eagle' )", "+ ( blue 'cat' )", "+ ( rough 'bear' )", "[ + ( needs X 'bear' ) ] -> + ( round X )", "[ + ( visits X 'bear' ) , + ( kind X ) ] -> + ( nice X )", "+ ( chases 'lion' 'mouse' )", "[ + ( eats X 'dog' ) ] -> + ( kind X )", "+ ( eats 'bald_eagle' 'dog' )", "+ ( chases 'lion' 'rabbit' )", "+ ( eats 'cat' 'bald_eagle' )", "+ ( visits 'cat' 'bear' )", "+ ( likes 'cow' 'cat' )", "+ ( visits 'dog' 'bear' )", "+ ( rough 'rabbit' )", "+ ( blue 'lion' )"], "assertion_statement": "+ ( kind 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit is rough.", "Bear sees bald eagle.", "Lion is blue.", "Dog visits bear.", "Squirrel needs bear.", "Bear is green.", "Cat eats bald eagle.", "Bald eagle eats dog.", "Lion chases mouse.", "Cow likes cat.", "Bear is rough.", "Lion chases rabbit.", "Cat is blue.", "Cat visits bear.", "If X eats dog then X is kind.", "If X sees cow then X is young.", "If X visits bear or X is kind then X is nice.", "If X needs bear then X is round."], "assertion_statement": "Rabbit is kind."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::rough('rabbit').", "1.0::sees('bear', 'bald_eagle').", "1.0::blue('lion').", "1.0::visits('dog', 'bear').", "1.0::needs('squirrel', 'bear').", "1.0::green('bear').", "1.0::eats('cat', 'bald_eagle').", "1.0::eats('bald_eagle', 'dog').", "1.0::chases('lion', 'mouse').", "1.0::likes('cow', 'cat').", "1.0::rough('bear').", "1.0::chases('lion', 'rabbit').", "1.0::blue('cat').", "1.0::visits('cat', 'bear').", "1.0::kind(X) :- eats(X, 'dog').", "1.0::young(X) :- sees(X, 'cow').", "1.0::nice(X) :- visits(X, 'bear'); kind(X).", "1.0::round(X) :- needs(X, 'bear')."], "assertion_statement": "query(kind('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-24", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=4, probability=1.0, group=None, name=cold('bald_eagle'), source=None) | 2: atom(identifier=(5, ('bald_eagle',) {{}}, 0), probability=1.0, group=(5, ('bald_eagle',) {{}}), name=choice(5,0,green('bald_eagle'),'bald_eagle'), source=None) | 3: conj(children=(1, 2), name=green('bald_eagle')) | Queries :  green('bald_eagle') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( cold 'mouse' )", "[ + ( nice X ) ] -> + ( red X )", "[ + ( chases X 'squirrel' ) ] -> + ( big X )", "+ ( cold 'bald_eagle' )", "[ + ( visits X 'rabbit' ) ] -> + ( nice X )", "[ + ( cold X ) ] -> + ( green X )", "+ ( eats 'squirrel' 'dog' )"], "assertion_statement": "+ ( green 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Squirrel eats dog.", "Mouse is cold.", "Bald eagle is cold.", "If X is cold then X is green.", "If X is nice then X is red.", "If X visits rabbit then X is nice.", "If X chases squirrel then X is big."], "assertion_statement": "Bald eagle is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::eats('squirrel', 'dog').", "1.0::cold('mouse').", "1.0::cold('bald_eagle').", "1.0::green(X) :- cold(X).", "1.0::red(X) :- nice(X).", "1.0::nice(X) :- visits(X, 'rabbit').", "1.0::big(X) :- chases(X, 'squirrel')."], "assertion_statement": "query(green('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-25", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bear'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'lion'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'cow'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  cold('cow') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( needs 'bald_eagle' 'mouse' )", "+ ( rough 'bear' )", "[ + ( cold X ) ] -> + ( cold X )", "[ + ( chases X 'bear' ) ] -> + ( cold X )", "+ ( eats 'bald_eagle' 'dog' )", "[ + ( chases X 'dog' ) ] -> + ( red X )", "+ ( chases 'bear' 'rabbit' )", "[ + ( needs X 'bald_eagle' ) ] -> + ( rough X )", "+ ( chases 'lion' 'bald_eagle' )", "+ ( big 'cow' )", "+ ( visits 'lion' 'tiger' )", "+ ( eats 'tiger' 'dog' )"], "assertion_statement": "+ ( cold 'cow' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow is big.", "Bear chases rabbit.", "Lion chases bald eagle.", "Bald eagle eats dog.", "Bald eagle needs mouse.", "Lion visits tiger.", "Tiger eats dog.", "Bear is rough.", "If X chases bear then X is cold.", "If X is cold then X is cold.", "If X needs bald eagle then X is rough.", "If X chases dog then X is red."], "assertion_statement": "Cow is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::big('cow').", "1.0::chases('bear', 'rabbit').", "1.0::chases('lion', 'bald_eagle').", "1.0::eats('bald_eagle', 'dog').", "1.0::needs('bald_eagle', 'mouse').", "1.0::visits('lion', 'tiger').", "1.0::eats('tiger', 'dog').", "1.0::rough('bear').", "1.0::cold(X) :- chases(X, 'bear').", "1.0::cold(X) :- cold(X).", "1.0::rough(X) :- needs(X, 'bald_eagle').", "1.0::red(X) :- chases(X, 'dog')."], "assertion_statement": "query(cold('cow'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-26", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bear'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bear'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'squirrel'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'mouse'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=4, probability=1.0, group=None, name=chases('mouse','rabbit'), source=None) | 2: atom(identifier=(34, ('mouse',) {{}}, 0), probability=1.0, group=(34, ('mouse',) {{}}), name=choice(34,0,nice('mouse'),'mouse'), source=None) | 3: conj(children=(1, 2), name=nice('mouse')) | Queries :  nice('mouse') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( cold 'tiger' )", "[ + ( chases X 'rabbit' ) ] -> + ( nice X )", "+ ( needs 'bald_eagle' 'squirrel' )", "+ ( chases 'squirrel' 'cat' )", "+ ( eats 'tiger' 'bear' )", "+ ( eats 'tiger' 'tiger' )", "+ ( round 'bald_eagle' )", "[ + ( eats X 'bear' ) ] -> + ( kind X )", "+ ( blue 'cat' )", "+ ( likes 'cat' 'tiger' )", "+ ( visits 'cow' 'cow' )", "+ ( needs 'bald_eagle' 'rabbit' )", "+ ( needs 'cow' 'rabbit' )", "+ ( big 'bear' )", "+ ( chases 'bear' 'dog' )", "+ ( chases 'mouse' 'rabbit' )", "[ + ( cold X ) ] -> + ( round X )", "+ ( chases 'bald_eagle' 'bear' )", "+ ( visits 'bear' 'squirrel' )"], "assertion_statement": "+ ( nice 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger is cold.", "Bear chases dog.", "Mouse chases rabbit.", "Cow needs rabbit.", "Bald eagle chases bear.", "Bear visits squirrel.", "Tiger eats bear.", "Bald eagle needs squirrel.", "Squirrel chases cat.", "Cow visits cow.", "Tiger eats tiger.", "Cat is blue.", "Bald eagle needs rabbit.", "Bear is big.", "Bald eagle is round.", "Cat likes tiger.", "If X eats bear then X is kind.", "If X chases rabbit then X is nice.", "If X is cold then X is round."], "assertion_statement": "Mouse is nice."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::cold('tiger').", "1.0::chases('bear', 'dog').", "1.0::chases('mouse', 'rabbit').", "1.0::needs('cow', 'rabbit').", "1.0::chases('bald_eagle', 'bear').", "1.0::visits('bear', 'squirrel').", "1.0::eats('tiger', 'bear').", "1.0::needs('bald_eagle', 'squirrel').", "1.0::chases('squirrel', 'cat').", "1.0::visits('cow', 'cow').", "1.0::eats('tiger', 'tiger').", "1.0::blue('cat').", "1.0::needs('bald_eagle', 'rabbit').", "1.0::big('bear').", "1.0::round('bald_eagle').", "1.0::likes('cat', 'tiger').", "1.0::kind(X) :- eats(X, 'bear').", "1.0::nice(X) :- chases(X, 'rabbit').", "1.0::round(X) :- cold(X)."], "assertion_statement": "query(nice('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-27", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'lion'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'tiger'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bear'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'rabbit'"], "probability": 1.0}, "label": false, "exception": null, "min_proof_depth": 0, "proof": "Queries :  round('rabbit') : None [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( green X ) , + ( green X ) ] -> + ( big X )", "[ + ( likes X 'cat' ) ] -> + ( round X )", "[ + ( kind X ) ] -> + ( red X )", "+ ( blue 'cat' )", "+ ( sees 'tiger' 'cat' )", "[ + ( kind X ) ] -> + ( young X )", "+ ( sees 'lion' 'cow' )", "+ ( sees 'bald_eagle' 'cat' )", "+ ( likes 'lion' 'dog' )", "+ ( sees 'lion' 'rabbit' )", "[ + ( round X ) , + ( kind X ) ] -> + ( big X )", "[ + ( sees X 'dog' ) ] -> + ( rough X )", "+ ( red 'mouse' )", "+ ( cold 'bear' )", "+ ( visits 'bear' 'tiger' )", "+ ( eats 'tiger' 'dog' )"], "assertion_statement": "+ ( round 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion sees cow.", "Lion sees rabbit.", "Lion likes dog.", "Bald eagle sees cat.", "Mouse is red.", "Bear is cold.", "Tiger eats dog.", "Tiger sees cat.", "Cat is blue.", "Bear visits tiger.", "If X is round or X is kind then X is big.", "If X is kind then X is young.", "If X sees dog then X is rough.", "If X is green or X is green then X is big.", "If X likes cat then X is round.", "If X is kind then X is red."], "assertion_statement": "Rabbit is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('lion', 'cow').", "1.0::sees('lion', 'rabbit').", "1.0::likes('lion', 'dog').", "1.0::sees('bald_eagle', 'cat').", "1.0::red('mouse').", "1.0::cold('bear').", "1.0::eats('tiger', 'dog').", "1.0::sees('tiger', 'cat').", "1.0::blue('cat').", "1.0::visits('bear', 'tiger').", "1.0::big(X) :- round(X); kind(X).", "1.0::young(X) :- kind(X).", "1.0::rough(X) :- sees(X, 'dog').", "1.0::big(X) :- green(X); green(X).", "1.0::round(X) :- likes(X, 'cat').", "1.0::red(X) :- kind(X)."], "assertion_statement": "query(round('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-28", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bear'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=20, probability=1.0, group=None, name=red('bear'), source=None) | 2: atom(identifier=(36, ('bear',) {{}}, 0), probability=1.0, group=(36, ('bear',) {{}}), name=choice(36,0,nice('bear'),'bear'), source=None) | 3: conj(children=(1, 2), name=nice('bear')) | Queries :  nice('bear') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( needs 'cat' 'cow' )", "+ ( chases 'cat' 'cow' )", "[ + ( likes X 'cow' ) ] -> + ( rough X )", "+ ( sees 'cow' 'cat' )", "+ ( chases 'tiger' 'bear' )", "+ ( visits 'bald_eagle' 'bald_eagle' )", "+ ( sees 'dog' 'bear' )", "[ + ( likes X 'mouse' ) ] -> + ( red X )", "[ + ( young X ) ] -> + ( big X )", "+ ( blue 'squirrel' )", "[ + ( chases X 'dog' ) ] -> + ( kind X )", "+ ( eats 'rabbit' 'squirrel' )", "+ ( eats 'squirrel' 'dog' )", "+ ( green 'bear' )", "+ ( red 'bear' )", "+ ( chases 'mouse' 'cat' )", "[ + ( needs X 'cow' ) , + ( kind X ) ] -> + ( nice X )", "+ ( likes 'lion' 'cow' )", "+ ( likes 'tiger' 'bear' )", "+ ( visits 'cow' 'rabbit' )", "[ + ( eats X 'bald_eagle' ) , + ( red X ) ] -> + ( nice X )", "[ + ( likes X 'lion' ) , + ( kind X ) ] -> + ( young X )"], "assertion_statement": "+ ( nice 'bear' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion likes cow.", "Bear is green.", "Tiger likes bear.", "Cow sees cat.", "Mouse chases cat.", "Squirrel eats dog.", "Cat chases cow.", "Rabbit eats squirrel.", "Squirrel is blue.", "Cow visits rabbit.", "Bald eagle visits bald eagle.", "Cat needs cow.", "Bear is red.", "Dog sees bear.", "Tiger chases bear.", "If X needs cow or X is kind then X is nice.", "If X eats bald eagle or X is red then X is nice.", "If X likes mouse then X is red.", "If X is young then X is big.", "If X likes lion or X is kind then X is young.", "If X chases dog then X is kind.", "If X likes cow then X is rough."], "assertion_statement": "Bear is nice."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('lion', 'cow').", "1.0::green('bear').", "1.0::likes('tiger', 'bear').", "1.0::sees('cow', 'cat').", "1.0::chases('mouse', 'cat').", "1.0::eats('squirrel', 'dog').", "1.0::chases('cat', 'cow').", "1.0::eats('rabbit', 'squirrel').", "1.0::blue('squirrel').", "1.0::visits('cow', 'rabbit').", "1.0::visits('bald_eagle', 'bald_eagle').", "1.0::needs('cat', 'cow').", "1.0::red('bear').", "1.0::sees('dog', 'bear').", "1.0::chases('tiger', 'bear').", "1.0::nice(X) :- needs(X, 'cow'); kind(X).", "1.0::nice(X) :- eats(X, 'bald_eagle'); red(X).", "1.0::red(X) :- likes(X, 'mouse').", "1.0::big(X) :- young(X).", "1.0::young(X) :- likes(X, 'lion'); kind(X).", "1.0::kind(X) :- chases(X, 'dog').", "1.0::rough(X) :- likes(X, 'cow')."], "assertion_statement": "query(nice('bear'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-29", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'squirrel'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'dog'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=19, probability=1.0, group=None, name=kind('dog'), source=None) | 2: atom(identifier=(22, ('dog',) {{}}, 0), probability=1.0, group=(22, ('dog',) {{}}), name=choice(22,0,round('dog'),'dog'), source=None) | 3: conj(children=(1, 2), name=round('dog')) | Queries :  round('dog') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( big 'rabbit' )", "+ ( round 'lion' )", "+ ( likes 'dog' 'mouse' )", "+ ( blue 'tiger' )", "[ + ( chases X 'lion' ) ] -> + ( rough X )", "+ ( round 'tiger' )", "+ ( sees 'bear' 'bald_eagle' )", "[ + ( rough X ) ] -> + ( cold X )", "+ ( visits 'bald_eagle' 'dog' )", "+ ( kind 'dog' )", "[ + ( eats X 'cat' ) , + ( kind X ) ] -> + ( round X )", "+ ( needs 'bald_eagle' 'bald_eagle' )", "+ ( needs 'squirrel' 'cow' )", "+ ( likes 'squirrel' 'mouse' )", "+ ( sees 'bald_eagle' 'bear' )", "+ ( eats 'dog' 'tiger' )"], "assertion_statement": "+ ( round 'dog' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Squirrel likes mouse.", "Bear sees bald eagle.", "Tiger is blue.", "Lion is round.", "Dog eats tiger.", "Dog likes mouse.", "Bald eagle sees bear.", "Squirrel needs cow.", "Tiger is round.", "Bald eagle visits dog.", "Rabbit is big.", "Dog is kind.", "Bald eagle needs bald eagle.", "If X eats cat or X is kind then X is round.", "If X is rough then X is cold.", "If X chases lion then X is rough."], "assertion_statement": "Dog is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('squirrel', 'mouse').", "1.0::sees('bear', 'bald_eagle').", "1.0::blue('tiger').", "1.0::round('lion').", "1.0::eats('dog', 'tiger').", "1.0::likes('dog', 'mouse').", "1.0::sees('bald_eagle', 'bear').", "1.0::needs('squirrel', 'cow').", "1.0::round('tiger').", "1.0::visits('bald_eagle', 'dog').", "1.0::big('rabbit').", "1.0::kind('dog').", "1.0::needs('bald_eagle', 'bald_eagle').", "1.0::round(X) :- eats(X, 'cat'); kind(X).", "1.0::cold(X) :- rough(X).", "1.0::rough(X) :- chases(X, 'lion')."], "assertion_statement": "query(round('dog'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-30", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'tiger'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'cow'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'lion'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=15, probability=1.0, group=None, name=needs('lion','bear'), source=None) | 2: atom(identifier=(18, ('lion',) {{}}, 0), probability=1.0, group=(18, ('lion',) {{}}), name=choice(18,0,red('lion'),'lion'), source=None) | 3: conj(children=(1, 2), name=red('lion')) | Queries :  red('lion') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'squirrel' 'tiger' )", "+ ( likes 'bear' 'dog' )", "+ ( sees 'tiger' 'dog' )", "+ ( likes 'mouse' 'bear' )", "[ + ( needs X 'bear' ) ] -> + ( red X )", "+ ( visits 'bald_eagle' 'cat' )", "+ ( needs 'bald_eagle' 'cow' )", "[ + ( visits X 'cow' ) , + ( rough X ) ] -> + ( green X )", "[ + ( sees X 'bear' ) , + ( nice X ) ] -> + ( kind X )", "+ ( big 'lion' )", "+ ( visits 'squirrel' 'cow' )", "[ + ( visits X 'cow' ) ] -> + ( kind X )", "[ + ( likes X 'lion' ) ] -> + ( round X )", "+ ( needs 'lion' 'bear' )", "+ ( green 'cow' )", "[ + ( green X ) ] -> + ( rough X )", "[ + ( big X ) ] -> + ( nice X )", "+ ( chases 'cat' 'lion' )"], "assertion_statement": "+ ( red 'lion' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Mouse likes bear.", "Squirrel likes tiger.", "Bald eagle visits cat.", "Cat chases lion.", "Bald eagle needs cow.", "Lion is big.", "Tiger sees dog.", "Squirrel visits cow.", "Bear likes dog.", "Lion needs bear.", "Cow is green.", "If X needs bear then X is red.", "If X is green then X is rough.", "If X sees bear or X is nice then X is kind.", "If X visits cow then X is kind.", "If X is big then X is nice.", "If X likes lion then X is round.", "If X visits cow or X is rough then X is green."], "assertion_statement": "Lion is red."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('mouse', 'bear').", "1.0::likes('squirrel', 'tiger').", "1.0::visits('bald_eagle', 'cat').", "1.0::chases('cat', 'lion').", "1.0::needs('bald_eagle', 'cow').", "1.0::big('lion').", "1.0::sees('tiger', 'dog').", "1.0::visits('squirrel', 'cow').", "1.0::likes('bear', 'dog').", "1.0::needs('lion', 'bear').", "1.0::green('cow').", "1.0::red(X) :- needs(X, 'bear').", "1.0::rough(X) :- green(X).", "1.0::kind(X) :- sees(X, 'bear'); nice(X).", "1.0::kind(X) :- visits(X, 'cow').", "1.0::nice(X) :- big(X).", "1.0::round(X) :- likes(X, 'lion').", "1.0::green(X) :- visits(X, 'cow'); rough(X)."], "assertion_statement": "query(red('lion'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-31", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bear'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'rabbit'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'mouse'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'mouse'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=17, probability=1.0, group=None, name=visits('mouse','tiger'), source=None) | 2: atom(identifier=(41, ('mouse',) {{}}, 0), probability=1.0, group=(41, ('mouse',) {{}}), name=choice(41,0,red('mouse'),'mouse'), source=None) | 3: conj(children=(1, 2), name=red('mouse')) | 4: atom(identifier=(52, ('mouse',) {{}}, 0), probability=1.0, group=(52, ('mouse',) {{}}), name=choice(52,0,red('mouse'),'mouse'), source=None) | Queries :  red('mouse') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( eats 'lion' 'cow' )", "+ ( needs 'cow' 'rabbit' )", "[ + ( visits X 'tiger' ) , + ( red X ) ] -> + ( red X )", "+ ( kind 'dog' )", "+ ( likes 'mouse' 'lion' )", "+ ( likes 'rabbit' 'bald_eagle' )", "+ ( rough 'dog' )", "+ ( nice 'rabbit' )", "+ ( eats 'bear' 'bald_eagle' )", "[ + ( needs X 'cow' ) , + ( young X ) ] -> + ( round X )", "+ ( visits 'mouse' 'tiger' )", "+ ( cold 'bald_eagle' )", "[ + ( round X ) ] -> + ( green X )", "[ + ( red X ) ] -> + ( red X )", "+ ( visits 'dog' 'bear' )", "+ ( kind 'bald_eagle' )"], "assertion_statement": "+ ( red 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow needs rabbit.", "Dog visits bear.", "Bald eagle is kind.", "Lion eats cow.", "Rabbit is nice.", "Dog is rough.", "Mouse likes lion.", "Bear eats bald eagle.", "Rabbit likes bald eagle.", "Dog is kind.", "Mouse visits tiger.", "Bald eagle is cold.", "If X needs cow or X is young then X is round.", "If X is round then X is green.", "If X visits tiger or X is red then X is red.", "If X is red then X is red."], "assertion_statement": "Mouse is red."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('cow', 'rabbit').", "1.0::visits('dog', 'bear').", "1.0::kind('bald_eagle').", "1.0::eats('lion', 'cow').", "1.0::nice('rabbit').", "1.0::rough('dog').", "1.0::likes('mouse', 'lion').", "1.0::eats('bear', 'bald_eagle').", "1.0::likes('rabbit', 'bald_eagle').", "1.0::kind('dog').", "1.0::visits('mouse', 'tiger').", "1.0::cold('bald_eagle').", "1.0::round(X) :- needs(X, 'cow'); young(X).", "1.0::green(X) :- round(X).", "1.0::red(X) :- visits(X, 'tiger'); red(X).", "1.0::red(X) :- red(X)."], "assertion_statement": "query(red('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-32", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'tiger'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'mouse'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 2, "proof": "1: atom(identifier=0, probability=1.0, group=None, name=chases('mouse','cow'), source=None) | 2: atom(identifier=(10, ('mouse',) {{}}, 0), probability=1.0, group=(10, ('mouse',) {{}}), name=choice(10,0,nice('mouse'),'mouse'), source=None) | 3: conj(children=(1, 2), name=None) | 4: atom(identifier=(29, ('mouse',) {{}}, 0), probability=1.0, group=(29, ('mouse',) {{}}), name=choice(29,0,round('mouse'),'mouse'), source=None) | 5: conj(children=(3, 4), name=round('mouse')) | Queries :  round('mouse') : 5 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( green X ) , + ( blue X ) ] -> + ( rough X )", "+ ( needs 'cat' 'tiger' )", "[ + ( chases X 'cow' ) ] -> + ( nice X )", "+ ( sees 'mouse' 'bear' )", "[ + ( visits X 'mouse' ) ] -> + ( young X )", "[ + ( nice X ) ] -> + ( round X )", "[ + ( kind X ) ] -> + ( rough X )", "+ ( sees 'tiger' 'lion' )", "[ + ( green X ) ] -> + ( kind X )", "+ ( chases 'mouse' 'cow' )", "+ ( needs 'bear' 'bear' )", "+ ( rough 'cat' )"], "assertion_statement": "+ ( round 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Mouse chases cow.", "Tiger sees lion.", "Cat is rough.", "Cat needs tiger.", "Bear needs bear.", "Mouse sees bear.", "If X chases cow then X is nice.", "If X visits mouse then X is young.", "If X is nice then X is round.", "If X is kind then X is rough.", "If X is green then X is kind.", "If X is green or X is blue then X is rough."], "assertion_statement": "Mouse is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::chases('mouse', 'cow').", "1.0::sees('tiger', 'lion').", "1.0::rough('cat').", "1.0::needs('cat', 'tiger').", "1.0::needs('bear', 'bear').", "1.0::sees('mouse', 'bear').", "1.0::nice(X) :- chases(X, 'cow').", "1.0::young(X) :- visits(X, 'mouse').", "1.0::round(X) :- nice(X).", "1.0::rough(X) :- kind(X).", "1.0::kind(X) :- green(X).", "1.0::rough(X) :- green(X); blue(X)."], "assertion_statement": "query(round('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-33", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cow'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'rabbit'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=20, probability=1.0, group=None, name=big('rabbit'), source=None) | 2: atom(identifier=(34, ('rabbit',) {{}}, 0), probability=1.0, group=(34, ('rabbit',) {{}}), name=choice(34,0,kind('rabbit'),'rabbit'), source=None) | 3: conj(children=(1, 2), name=kind('rabbit')) | Queries :  kind('rabbit') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( cold X ) ] -> + ( cold X )", "+ ( chases 'cow' 'tiger' )", "+ ( round 'bald_eagle' )", "[ + ( big X ) ] -> + ( kind X )", "+ ( young 'cat' )", "+ ( young 'dog' )", "+ ( blue 'dog' )", "+ ( visits 'squirrel' 'bald_eagle' )", "[ + ( likes X 'squirrel' ) ] -> + ( young X )", "+ ( big 'rabbit' )", "[ + ( visits X 'mouse' ) ] -> + ( blue X )", "+ ( needs 'dog' 'dog' )", "+ ( needs 'cat' 'lion' )", "[ + ( visits X 'rabbit' ) ] -> + ( young X )", "+ ( likes 'dog' 'squirrel' )", "+ ( needs 'dog' 'tiger' )", "+ ( visits 'mouse' 'lion' )", "+ ( red 'bear' )", "+ ( needs 'mouse' 'bald_eagle' )", "+ ( chases 'tiger' 'rabbit' )", "+ ( nice 'bald_eagle' )"], "assertion_statement": "+ ( kind 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Mouse needs bald eagle.", "Dog is blue.", "Squirrel visits bald eagle.", "Cat needs lion.", "Dog is young.", "Dog needs dog.", "Mouse visits lion.", "Cow chases tiger.", "Bald eagle is nice.", "Cat is young.", "Tiger chases rabbit.", "Dog needs tiger.", "Dog likes squirrel.", "Rabbit is big.", "Bear is red.", "Bald eagle is round.", "If X visits mouse then X is blue.", "If X is big then X is kind.", "If X visits rabbit then X is young.", "If X is cold then X is cold.", "If X likes squirrel then X is young."], "assertion_statement": "Rabbit is kind."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('mouse', 'bald_eagle').", "1.0::blue('dog').", "1.0::visits('squirrel', 'bald_eagle').", "1.0::needs('cat', 'lion').", "1.0::young('dog').", "1.0::needs('dog', 'dog').", "1.0::visits('mouse', 'lion').", "1.0::chases('cow', 'tiger').", "1.0::nice('bald_eagle').", "1.0::young('cat').", "1.0::chases('tiger', 'rabbit').", "1.0::needs('dog', 'tiger').", "1.0::likes('dog', 'squirrel').", "1.0::big('rabbit').", "1.0::red('bear').", "1.0::round('bald_eagle').", "1.0::blue(X) :- visits(X, 'mouse').", "1.0::kind(X) :- big(X).", "1.0::young(X) :- visits(X, 'rabbit').", "1.0::cold(X) :- cold(X).", "1.0::young(X) :- likes(X, 'squirrel')."], "assertion_statement": "query(kind('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-34", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bear'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cat'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bear'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'cat'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'tiger'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 2, "proof": "1: atom(identifier=3, probability=1.0, group=None, name=blue('tiger'), source=None) | 2: atom(identifier=(34, ('tiger',) {{}}, 0), probability=1.0, group=(34, ('tiger',) {{}}), name=choice(34,0,red('tiger'),'tiger'), source=None) | 3: conj(children=(1, 2), name=None) | 4: atom(identifier=(59, ('tiger',) {{}}, 0), probability=1.0, group=(59, ('tiger',) {{}}), name=choice(59,0,green('tiger'),'tiger'), source=None) | 5: conj(children=(3, 4), name=green('tiger')) | Queries :  green('tiger') : 5 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( round 'cat' )", "[ + ( blue X ) ] -> + ( red X )", "+ ( needs 'bald_eagle' 'bear' )", "+ ( eats 'bear' 'lion' )", "+ ( visits 'cat' 'mouse' )", "+ ( blue 'tiger' )", "[ + ( red X ) ] -> + ( green X )", "[ + ( sees X 'tiger' ) ] -> + ( nice X )", "+ ( young 'bald_eagle' )", "+ ( blue 'cow' )", "+ ( visits 'squirrel' 'mouse' )", "+ ( sees 'bear' 'squirrel' )", "+ ( eats 'squirrel' 'dog' )", "+ ( visits 'bear' 'dog' )", "+ ( rough 'lion' )", "[ + ( needs X 'lion' ) ] -> + ( nice X )", "+ ( sees 'squirrel' 'mouse' )", "+ ( likes 'tiger' 'squirrel' )", "+ ( needs 'lion' 'dog' )", "+ ( eats 'cat' 'lion' )", "[ + ( likes X 'lion' ) ] -> + ( round X )"], "assertion_statement": "+ ( green 'tiger' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Squirrel visits mouse.", "Bear visits dog.", "Tiger is blue.", "Bear sees squirrel.", "Bald eagle needs bear.", "Cow is blue.", "Bald eagle is young.", "Lion needs dog.", "Cat eats lion.", "Tiger likes squirrel.", "Cat visits mouse.", "Squirrel eats dog.", "Lion is rough.", "Bear eats lion.", "Squirrel sees mouse.", "Cat is round.", "If X sees tiger then X is nice.", "If X is blue then X is red.", "If X needs lion then X is nice.", "If X likes lion then X is round.", "If X is red then X is green."], "assertion_statement": "Tiger is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::visits('squirrel', 'mouse').", "1.0::visits('bear', 'dog').", "1.0::blue('tiger').", "1.0::sees('bear', 'squirrel').", "1.0::needs('bald_eagle', 'bear').", "1.0::blue('cow').", "1.0::young('bald_eagle').", "1.0::needs('lion', 'dog').", "1.0::eats('cat', 'lion').", "1.0::likes('tiger', 'squirrel').", "1.0::visits('cat', 'mouse').", "1.0::eats('squirrel', 'dog').", "1.0::rough('lion').", "1.0::eats('bear', 'lion').", "1.0::sees('squirrel', 'mouse').", "1.0::round('cat').", "1.0::nice(X) :- sees(X, 'tiger').", "1.0::red(X) :- blue(X).", "1.0::nice(X) :- needs(X, 'lion').", "1.0::round(X) :- likes(X, 'lion').", "1.0::green(X) :- red(X)."], "assertion_statement": "query(green('tiger'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-35", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'dog'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'rabbit'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cow'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'rabbit'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'squirrel'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'mouse'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'dog'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=4, probability=1.0, group=None, name=young('dog'), source=None) | 2: atom(identifier=(42, ('dog',) {{}}, 0), probability=1.0, group=(42, ('dog',) {{}}), name=choice(42,0,red('dog'),'dog'), source=None) | 3: conj(children=(1, 2), name=red('dog')) | Queries :  red('dog') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( sees 'cat' 'rabbit' )", "+ ( visits 'rabbit' 'mouse' )", "+ ( sees 'rabbit' 'bald_eagle' )", "+ ( eats 'cow' 'lion' )", "[ + ( visits X 'dog' ) ] -> + ( rough X )", "+ ( sees 'dog' 'bald_eagle' )", "+ ( chases 'tiger' 'tiger' )", "+ ( sees 'cow' 'cow' )", "+ ( likes 'cat' 'tiger' )", "+ ( young 'dog' )", "[ + ( likes X 'mouse' ) , + ( rough X ) ] -> + ( rough X )", "[ + ( likes X 'bear' ) , + ( young X ) ] -> + ( red X )", "+ ( likes 'cat' 'mouse' )", "+ ( cold 'rabbit' )", "[ + ( cold X ) ] -> + ( kind X )", "+ ( needs 'squirrel' 'cat' )", "+ ( needs 'mouse' 'dog' )", "+ ( chases 'rabbit' 'lion' )", "[ + ( visits X 'cow' ) ] -> + ( rough X )", "+ ( sees 'mouse' 'bald_eagle' )", "[ + ( cold X ) ] -> + ( rough X )", "[ + ( rough X ) ] -> + ( blue X )"], "assertion_statement": "+ ( red 'dog' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Dog sees bald eagle.", "Rabbit sees bald eagle.", "Mouse sees bald eagle.", "Dog is young.", "Tiger chases tiger.", "Cat sees rabbit.", "Cow sees cow.", "Rabbit is cold.", "Cow eats lion.", "Cat likes mouse.", "Rabbit chases lion.", "Rabbit visits mouse.", "Squirrel needs cat.", "Mouse needs dog.", "Cat likes tiger.", "If X likes mouse or X is rough then X is rough.", "If X is cold then X is rough.", "If X likes bear or X is young then X is red.", "If X visits cow then X is rough.", "If X is cold then X is kind.", "If X visits dog then X is rough.", "If X is rough then X is blue."], "assertion_statement": "Dog is red."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('dog', 'bald_eagle').", "1.0::sees('rabbit', 'bald_eagle').", "1.0::sees('mouse', 'bald_eagle').", "1.0::young('dog').", "1.0::chases('tiger', 'tiger').", "1.0::sees('cat', 'rabbit').", "1.0::sees('cow', 'cow').", "1.0::cold('rabbit').", "1.0::eats('cow', 'lion').", "1.0::likes('cat', 'mouse').", "1.0::chases('rabbit', 'lion').", "1.0::visits('rabbit', 'mouse').", "1.0::needs('squirrel', 'cat').", "1.0::needs('mouse', 'dog').", "1.0::likes('cat', 'tiger').", "1.0::rough(X) :- likes(X, 'mouse'); rough(X).", "1.0::rough(X) :- cold(X).", "1.0::red(X) :- likes(X, 'bear'); young(X).", "1.0::rough(X) :- visits(X, 'cow').", "1.0::kind(X) :- cold(X).", "1.0::rough(X) :- visits(X, 'dog').", "1.0::blue(X) :- rough(X)."], "assertion_statement": "query(red('dog'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-36", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'dog'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'cow'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'dog'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=0, probability=1.0, group=None, name=blue('dog'), source=None) | 2: atom(identifier=(88, ('dog',) {{}}, 0), probability=1.0, group=(88, ('dog',) {{}}), name=choice(88,0,cold('dog'),'dog'), source=None) | 3: conj(children=(1, 2), name=cold('dog')) | Queries :  cold('dog') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( visits 'squirrel' 'bear' )", "+ ( needs 'bald_eagle' 'squirrel' )", "+ ( eats 'bald_eagle' 'lion' )", "[ + ( eats X 'lion' ) ] -> + ( red X )", "+ ( green 'cow' )", "[ + ( rough X ) ] -> + ( rough X )", "[ + ( blue X ) ] -> + ( cold X )", "+ ( blue 'lion' )", "[ + ( cold X ) , + ( big X ) ] -> + ( kind X )", "+ ( blue 'dog' )", "+ ( visits 'lion' 'mouse' )", "[ + ( nice X ) ] -> + ( young X )", "[ + ( eats X 'dog' ) ] -> + ( young X )", "+ ( sees 'dog' 'rabbit' )", "+ ( young 'bald_eagle' )", "+ ( eats 'dog' 'bear' )", "[ + ( sees X 'mouse' ) ] -> + ( rough X )", "+ ( red 'mouse' )", "[ + ( nice X ) ] -> + ( nice X )", "+ ( visits 'bald_eagle' 'cat' )", "+ ( visits 'rabbit' 'squirrel' )", "+ ( needs 'cat' 'bald_eagle' )", "+ ( likes 'tiger' 'bear' )", "+ ( needs 'tiger' 'mouse' )"], "assertion_statement": "+ ( cold 'dog' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Dog is blue.", "Dog sees rabbit.", "Bald eagle visits cat.", "Bald eagle is young.", "Mouse is red.", "Tiger likes bear.", "Bald eagle needs squirrel.", "Squirrel visits bear.", "Cat needs bald eagle.", "Tiger needs mouse.", "Dog eats bear.", "Lion is blue.", "Rabbit visits squirrel.", "Bald eagle eats lion.", "Lion visits mouse.", "Cow is green.", "If X is nice then X is nice.", "If X is rough then X is rough.", "If X eats dog then X is young.", "If X is nice then X is young.", "If X eats lion then X is red.", "If X sees mouse then X is rough.", "If X is cold or X is big then X is kind.", "If X is blue then X is cold."], "assertion_statement": "Dog is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::blue('dog').", "1.0::sees('dog', 'rabbit').", "1.0::visits('bald_eagle', 'cat').", "1.0::young('bald_eagle').", "1.0::red('mouse').", "1.0::likes('tiger', 'bear').", "1.0::needs('bald_eagle', 'squirrel').", "1.0::visits('squirrel', 'bear').", "1.0::needs('cat', 'bald_eagle').", "1.0::needs('tiger', 'mouse').", "1.0::eats('dog', 'bear').", "1.0::blue('lion').", "1.0::visits('rabbit', 'squirrel').", "1.0::eats('bald_eagle', 'lion').", "1.0::visits('lion', 'mouse').", "1.0::green('cow').", "1.0::nice(X) :- nice(X).", "1.0::rough(X) :- rough(X).", "1.0::young(X) :- eats(X, 'dog').", "1.0::young(X) :- nice(X).", "1.0::red(X) :- eats(X, 'lion').", "1.0::rough(X) :- sees(X, 'mouse').", "1.0::kind(X) :- cold(X); big(X).", "1.0::cold(X) :- blue(X)."], "assertion_statement": "query(cold('dog'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-37", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'squirrel'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=0, probability=1.0, group=None, name=rough('bald_eagle'), source=None) | 2: atom(identifier=(18, ('bald_eagle',) {{}}, 0), probability=1.0, group=(18, ('bald_eagle',) {{}}), name=choice(18,0,rough('bald_eagle'),'bald_eagle'), source=None) | 3: atom(identifier=(39, ('bald_eagle',) {{}}, 0), probability=1.0, group=(39, ('bald_eagle',) {{}}), name=choice(39,0,young('bald_eagle'),'bald_eagle'), source=None) | 4: conj(children=(1, 3), name=young('bald_eagle')) | Queries :  young('bald_eagle') : 4 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( eats 'lion' 'bear' )", "[ + ( chases X 'lion' ) ] -> + ( round X )", "[ + ( rough X ) ] -> + ( young X )", "+ ( rough 'bald_eagle' )", "+ ( blue 'squirrel' )", "[ + ( chases X 'bald_eagle' ) , + ( green X ) ] -> + ( nice X )", "[ + ( blue X ) ] -> + ( kind X )", "+ ( red 'rabbit' )", "[ + ( young X ) ] -> + ( rough X )"], "assertion_statement": "+ ( young 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bald eagle is rough.", "Lion eats bear.", "Rabbit is red.", "Squirrel is blue.", "If X chases lion then X is round.", "If X is young then X is rough.", "If X chases bald eagle or X is green then X is nice.", "If X is rough then X is young.", "If X is blue then X is kind."], "assertion_statement": "Bald eagle is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::rough('bald_eagle').", "1.0::eats('lion', 'bear').", "1.0::red('rabbit').", "1.0::blue('squirrel').", "1.0::round(X) :- chases(X, 'lion').", "1.0::rough(X) :- young(X).", "1.0::nice(X) :- chases(X, 'bald_eagle'); green(X).", "1.0::young(X) :- rough(X).", "1.0::kind(X) :- blue(X)."], "assertion_statement": "query(young('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-38", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cow'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=15, probability=1.0, group=None, name=nice('cow'), source=None) | 2: atom(identifier=(61, ('cow',) {{}}, 0), probability=1.0, group=(61, ('cow',) {{}}), name=choice(61,0,young('cow'),'cow'), source=None) | 3: conj(children=(1, 2), name=None) | 4: atom(identifier=(50, ('cow',) {{}}, 0), probability=1.0, group=(50, ('cow',) {{}}), name=choice(50,0,blue('cow'),'cow'), source=None) | 5: conj(children=(3, 4), name=None) | 6: atom(identifier=(71, ('cow',) {{}}, 0), probability=1.0, group=(71, ('cow',) {{}}), name=choice(71,0,blue('cow'),'cow'), source=None) | 7: conj(children=(1, 6), name=None) | 8: disj(children=(5, 7), name=blue('cow')) | Queries :  blue('cow') : 8 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'tiger' 'bald_eagle' )", "+ ( needs 'lion' 'tiger' )", "+ ( round 'lion' )", "+ ( needs 'tiger' 'bear' )", "+ ( chases 'cow' 'rabbit' )", "+ ( green 'squirrel' )", "[ + ( green X ) ] -> + ( nice X )", "+ ( eats 'squirrel' 'cat' )", "[ + ( eats X 'rabbit' ) , + ( young X ) ] -> + ( blue X )", "+ ( nice 'cow' )", "+ ( nice 'bear' )", "[ + ( visits X 'rabbit' ) ] -> + ( young X )", "+ ( sees 'cat' 'cow' )", "+ ( green 'bear' )", "[ + ( nice X ) ] -> + ( blue X )", "+ ( nice 'mouse' )", "[ + ( nice X ) , + ( round X ) ] -> + ( young X )", "+ ( visits 'bald_eagle' 'tiger' )", "[ + ( needs X 'mouse' ) , + ( green X ) ] -> + ( cold X )"], "assertion_statement": "+ ( blue 'cow' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger needs bear.", "Squirrel eats cat.", "Cow chases rabbit.", "Lion is round.", "Squirrel is green.", "Bear is nice.", "Bear is green.", "Cat sees cow.", "Cow is nice.", "Mouse is nice.", "Lion needs tiger.", "Tiger likes bald eagle.", "Bald eagle visits tiger.", "If X needs mouse or X is green then X is cold.", "If X visits rabbit then X is young.", "If X is green then X is nice.", "If X eats rabbit or X is young then X is blue.", "If X is nice or X is round then X is young.", "If X is nice then X is blue."], "assertion_statement": "Cow is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('tiger', 'bear').", "1.0::eats('squirrel', 'cat').", "1.0::chases('cow', 'rabbit').", "1.0::round('lion').", "1.0::green('squirrel').", "1.0::nice('bear').", "1.0::green('bear').", "1.0::sees('cat', 'cow').", "1.0::nice('cow').", "1.0::nice('mouse').", "1.0::needs('lion', 'tiger').", "1.0::likes('tiger', 'bald_eagle').", "1.0::visits('bald_eagle', 'tiger').", "1.0::cold(X) :- needs(X, 'mouse'); green(X).", "1.0::young(X) :- visits(X, 'rabbit').", "1.0::nice(X) :- green(X).", "1.0::blue(X) :- eats(X, 'rabbit'); young(X).", "1.0::young(X) :- nice(X); round(X).", "1.0::blue(X) :- nice(X)."], "assertion_statement": "query(blue('cow'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-39", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'squirrel'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'squirrel'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'dog'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cow'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'mouse'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'dog'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=17, probability=1.0, group=None, name=likes('dog','rabbit'), source=None) | 2: atom(identifier=(29, ('dog',) {{}}, 0), probability=1.0, group=(29, ('dog',) {{}}), name=choice(29,0,blue('dog'),'dog'), source=None) | 3: conj(children=(1, 2), name=blue('dog')) | Queries :  blue('dog') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( eats 'cow' 'cat' )", "+ ( big 'mouse' )", "+ ( sees 'bald_eagle' 'rabbit' )", "+ ( likes 'dog' 'rabbit' )", "+ ( big 'cat' )", "[ + ( chases X 'mouse' ) ] -> + ( nice X )", "+ ( likes 'squirrel' 'cat' )", "+ ( eats 'rabbit' 'rabbit' )", "[ + ( likes X 'rabbit' ) ] -> + ( blue X )", "+ ( visits 'rabbit' 'cat' )", "+ ( chases 'bald_eagle' 'cow' )", "[ + ( young X ) ] -> + ( green X )", "+ ( needs 'squirrel' 'bear' )", "+ ( likes 'bear' 'bald_eagle' )", "+ ( nice 'rabbit' )", "[ + ( sees X 'mouse' ) ] -> + ( cold X )", "[ + ( cold X ) , + ( round X ) ] -> + ( big X )", "[ + ( kind X ) ] -> + ( nice X )", "[ + ( chases X 'bear' ) ] -> + ( cold X )", "[ + ( needs X 'mouse' ) ] -> + ( blue X )"], "assertion_statement": "+ ( blue 'dog' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bald eagle sees rabbit.", "Squirrel needs bear.", "Mouse is big.", "Rabbit eats rabbit.", "Squirrel likes cat.", "Bald eagle chases cow.", "Rabbit visits cat.", "Rabbit is nice.", "Cat is big.", "Dog likes rabbit.", "Cow eats cat.", "Bear likes bald eagle.", "If X chases bear then X is cold.", "If X likes rabbit then X is blue.", "If X is kind then X is nice.", "If X is young then X is green.", "If X needs mouse then X is blue.", "If X chases mouse then X is nice.", "If X sees mouse then X is cold.", "If X is cold or X is round then X is big."], "assertion_statement": "Dog is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('bald_eagle', 'rabbit').", "1.0::needs('squirrel', 'bear').", "1.0::big('mouse').", "1.0::eats('rabbit', 'rabbit').", "1.0::likes('squirrel', 'cat').", "1.0::chases('bald_eagle', 'cow').", "1.0::visits('rabbit', 'cat').", "1.0::nice('rabbit').", "1.0::big('cat').", "1.0::likes('dog', 'rabbit').", "1.0::eats('cow', 'cat').", "1.0::likes('bear', 'bald_eagle').", "1.0::cold(X) :- chases(X, 'bear').", "1.0::blue(X) :- likes(X, 'rabbit').", "1.0::nice(X) :- kind(X).", "1.0::green(X) :- young(X).", "1.0::blue(X) :- needs(X, 'mouse').", "1.0::nice(X) :- chases(X, 'mouse').", "1.0::cold(X) :- sees(X, 'mouse').", "1.0::big(X) :- cold(X); round(X)."], "assertion_statement": "query(blue('dog'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-40", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cow'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'dog'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=11, probability=1.0, group=None, name=kind('bald_eagle'), source=None) | 2: atom(identifier=(46, ('bald_eagle',) {{}}, 0), probability=1.0, group=(46, ('bald_eagle',) {{}}), name=choice(46,0,round('bald_eagle'),'bald_eagle'), source=None) | 3: conj(children=(1, 2), name=round('bald_eagle')) | Queries :  round('bald_eagle') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( red 'lion' )", "[ + ( eats X 'bald_eagle' ) , + ( nice X ) ] -> + ( big X )", "[ + ( needs X 'bald_eagle' ) ] -> + ( nice X )", "[ + ( likes X 'rabbit' ) ] -> + ( rough X )", "[ + ( eats X 'rabbit' ) , + ( round X ) ] -> + ( nice X )", "+ ( young 'dog' )", "+ ( eats 'cow' 'mouse' )", "+ ( young 'mouse' )", "[ + ( kind X ) , + ( red X ) ] -> + ( round X )", "+ ( green 'dog' )", "+ ( kind 'bald_eagle' )", "+ ( kind 'mouse' )", "+ ( chases 'tiger' 'bald_eagle' )", "[ + ( chases X 'rabbit' ) ] -> + ( young X )"], "assertion_statement": "+ ( round 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger chases bald eagle.", "Dog is young.", "Mouse is young.", "Cow eats mouse.", "Mouse is kind.", "Lion is red.", "Bald eagle is kind.", "Dog is green.", "If X eats rabbit or X is round then X is nice.", "If X eats bald eagle or X is nice then X is big.", "If X needs bald eagle then X is nice.", "If X is kind or X is red then X is round.", "If X chases rabbit then X is young.", "If X likes rabbit then X is rough."], "assertion_statement": "Bald eagle is round."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::chases('tiger', 'bald_eagle').", "1.0::young('dog').", "1.0::young('mouse').", "1.0::eats('cow', 'mouse').", "1.0::kind('mouse').", "1.0::red('lion').", "1.0::kind('bald_eagle').", "1.0::green('dog').", "1.0::nice(X) :- eats(X, 'rabbit'); round(X).", "1.0::big(X) :- eats(X, 'bald_eagle'); nice(X).", "1.0::nice(X) :- needs(X, 'bald_eagle').", "1.0::round(X) :- kind(X); red(X).", "1.0::young(X) :- chases(X, 'rabbit').", "1.0::rough(X) :- likes(X, 'rabbit')."], "assertion_statement": "query(round('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-41", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'rabbit'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'mouse'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'cow'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 0, "proof": "1: atom(identifier=0, probability=1.0, group=None, name=needs('bear','cow'), source=None) | Queries :  needs('bear','cow') : 1 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'tiger' 'lion' )", "[ + ( blue X ) , + ( kind X ) ] -> + ( cold X )", "+ ( round 'mouse' )", "[ + ( needs X 'lion' ) ] -> + ( blue X )", "+ ( chases 'rabbit' 'rabbit' )", "+ ( needs 'bear' 'cow' )", "+ ( big 'dog' )"], "assertion_statement": "+ ( needs 'bear', 'cow' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bear needs cow.", "Dog is big.", "Rabbit chases rabbit.", "Tiger likes lion.", "Mouse is round.", "If X is blue or X is kind then X is cold.", "If X needs lion then X is blue."], "assertion_statement": "Bear needs cow."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::needs('bear', 'cow').", "1.0::big('dog').", "1.0::chases('rabbit', 'rabbit').", "1.0::likes('tiger', 'lion').", "1.0::round('mouse').", "1.0::cold(X) :- blue(X); kind(X).", "1.0::blue(X) :- needs(X, 'lion')."], "assertion_statement": "query(needs('bear', 'cow'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-42", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=23, probability=1.0, group=None, name=kind('bald_eagle'), source=None) | 2: atom(identifier=(56, ('bald_eagle',) {{}}, 0), probability=1.0, group=(56, ('bald_eagle',) {{}}), name=choice(56,0,nice('bald_eagle'),'bald_eagle'), source=None) | 3: conj(children=(1, 2), name=nice('bald_eagle')) | Queries :  nice('bald_eagle') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( eats X 'cat' ) , + ( cold X ) ] -> + ( red X )", "+ ( likes 'mouse' 'bear' )", "+ ( sees 'bald_eagle' 'cow' )", "[ + ( red X ) , + ( red X ) ] -> + ( young X )", "+ ( chases 'bald_eagle' 'bald_eagle' )", "+ ( round 'squirrel' )", "+ ( eats 'tiger' 'bald_eagle' )", "+ ( eats 'squirrel' 'cow' )", "+ ( chases 'bald_eagle' 'tiger' )", "+ ( big 'squirrel' )", "+ ( green 'rabbit' )", "+ ( needs 'bald_eagle' 'bald_eagle' )", "[ + ( kind X ) ] -> + ( nice X )", "+ ( kind 'bald_eagle' )", "+ ( sees 'cat' 'cow' )", "+ ( big 'tiger' )", "+ ( likes 'lion' 'mouse' )", "[ + ( cold X ) ] -> + ( round X )", "+ ( needs 'cow' 'lion' )", "+ ( chases 'cat' 'tiger' )"], "assertion_statement": "+ ( nice 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Tiger is big.", "Rabbit is green.", "Bald eagle sees cow.", "Mouse likes bear.", "Cow needs lion.", "Squirrel is round.", "Lion likes mouse.", "Bald eagle chases bald eagle.", "Squirrel is big.", "Cat sees cow.", "Cat chases tiger.", "Bald eagle chases tiger.", "Tiger eats bald eagle.", "Squirrel eats cow.", "Bald eagle needs bald eagle.", "Bald eagle is kind.", "If X is red or X is red then X is young.", "If X eats cat or X is cold then X is red.", "If X is cold then X is round.", "If X is kind then X is nice."], "assertion_statement": "Bald eagle is nice."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::big('tiger').", "1.0::green('rabbit').", "1.0::sees('bald_eagle', 'cow').", "1.0::likes('mouse', 'bear').", "1.0::needs('cow', 'lion').", "1.0::round('squirrel').", "1.0::likes('lion', 'mouse').", "1.0::chases('bald_eagle', 'bald_eagle').", "1.0::big('squirrel').", "1.0::sees('cat', 'cow').", "1.0::chases('cat', 'tiger').", "1.0::chases('bald_eagle', 'tiger').", "1.0::eats('tiger', 'bald_eagle').", "1.0::eats('squirrel', 'cow').", "1.0::needs('bald_eagle', 'bald_eagle').", "1.0::kind('bald_eagle').", "1.0::young(X) :- red(X); red(X).", "1.0::red(X) :- eats(X, 'cat'); cold(X).", "1.0::round(X) :- cold(X).", "1.0::nice(X) :- kind(X)."], "assertion_statement": "query(nice('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-43", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cow'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'mouse'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 2, "proof": "1: atom(identifier=20, probability=1.0, group=None, name=sees('mouse','lion'), source=None) | 2: atom(identifier=(53, ('mouse',) {{}}, 0), probability=1.0, group=(53, ('mouse',) {{}}), name=choice(53,0,blue('mouse'),'mouse'), source=None) | 3: conj(children=(1, 2), name=None) | 4: atom(identifier=(26, ('mouse',) {{}}, 0), probability=1.0, group=(26, ('mouse',) {{}}), name=choice(26,0,young('mouse'),'mouse'), source=None) | 5: conj(children=(3, 4), name=young('mouse')) | Queries :  young('mouse') : 5 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( cold X ) , + ( nice X ) ] -> + ( rough X )", "[ + ( sees X 'lion' ) ] -> + ( blue X )", "+ ( sees 'cow' 'squirrel' )", "[ + ( chases X 'cat' ) ] -> + ( kind X )", "[ + ( chases X 'dog' ) ] -> + ( green X )", "[ + ( blue X ) ] -> + ( young X )", "+ ( needs 'bear' 'rabbit' )", "+ ( likes 'bear' 'mouse' )", "+ ( green 'tiger' )", "+ ( sees 'mouse' 'lion' )", "+ ( chases 'cow' 'dog' )", "+ ( nice 'rabbit' )", "+ ( likes 'cow' 'rabbit' )", "[ + ( cold X ) ] -> + ( rough X )", "+ ( red 'cat' )", "+ ( visits 'rabbit' 'lion' )", "+ ( rough 'lion' )", "+ ( round 'cow' )", "+ ( chases 'mouse' 'rabbit' )", "+ ( chases 'bald_eagle' 'lion' )", "+ ( sees 'squirrel' 'dog' )", "+ ( rough 'squirrel' )", "[ + ( visits X 'bald_eagle' ) ] -> + ( green X )"], "assertion_statement": "+ ( young 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cow likes rabbit.", "Mouse chases rabbit.", "Rabbit visits lion.", "Squirrel sees dog.", "Bear needs rabbit.", "Cat is red.", "Rabbit is nice.", "Bear likes mouse.", "Cow chases dog.", "Squirrel is rough.", "Lion is rough.", "Bald eagle chases lion.", "Mouse sees lion.", "Cow sees squirrel.", "Cow is round.", "Tiger is green.", "If X is blue then X is young.", "If X chases dog then X is green.", "If X is cold then X is rough.", "If X sees lion then X is blue.", "If X visits bald eagle then X is green.", "If X chases cat then X is kind.", "If X is cold or X is nice then X is rough."], "assertion_statement": "Mouse is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::likes('cow', 'rabbit').", "1.0::chases('mouse', 'rabbit').", "1.0::visits('rabbit', 'lion').", "1.0::sees('squirrel', 'dog').", "1.0::needs('bear', 'rabbit').", "1.0::red('cat').", "1.0::nice('rabbit').", "1.0::likes('bear', 'mouse').", "1.0::chases('cow', 'dog').", "1.0::rough('squirrel').", "1.0::rough('lion').", "1.0::chases('bald_eagle', 'lion').", "1.0::sees('mouse', 'lion').", "1.0::sees('cow', 'squirrel').", "1.0::round('cow').", "1.0::green('tiger').", "1.0::young(X) :- blue(X).", "1.0::green(X) :- chases(X, 'dog').", "1.0::rough(X) :- cold(X).", "1.0::blue(X) :- sees(X, 'lion').", "1.0::green(X) :- visits(X, 'bald_eagle').", "1.0::kind(X) :- chases(X, 'cat').", "1.0::rough(X) :- cold(X); nice(X)."], "assertion_statement": "query(young('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-44", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'lion'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'squirrel'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'lion'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'lion'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bear'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'rabbit'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=3, probability=1.0, group=None, name=young('bald_eagle'), source=None) | 2: atom(identifier=(21, ('bald_eagle',) {{}}, 0), probability=1.0, group=(21, ('bald_eagle',) {{}}), name=choice(21,0,blue('bald_eagle'),'bald_eagle'), source=None) | 3: conj(children=(1, 2), name=blue('bald_eagle')) | Queries :  blue('bald_eagle') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( visits 'rabbit' 'mouse' )", "+ ( needs 'lion' 'bald_eagle' )", "+ ( likes 'tiger' 'bald_eagle' )", "[ + ( visits X 'rabbit' ) ] -> + ( kind X )", "+ ( visits 'cow' 'squirrel' )", "[ + ( big X ) ] -> + ( kind X )", "+ ( visits 'lion' 'squirrel' )", "[ + ( rough X ) ] -> + ( nice X )", "+ ( visits 'lion' 'mouse' )", "[ + ( eats X 'bald_eagle' ) ] -> + ( green X )", "[ + ( young X ) ] -> + ( blue X )", "+ ( sees 'bear' 'bear' )", "+ ( young 'bald_eagle' )", "+ ( likes 'lion' 'cat' )", "+ ( nice 'bald_eagle' )", "+ ( kind 'rabbit' )", "+ ( chases 'squirrel' 'bald_eagle' )", "+ ( chases 'cat' 'tiger' )", "[ + ( needs X 'cow' ) ] -> + ( red X )"], "assertion_statement": "+ ( blue 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Lion visits squirrel.", "Cow visits squirrel.", "Bald eagle is young.", "Rabbit is kind.", "Lion likes cat.", "Squirrel chases bald eagle.", "Bald eagle is nice.", "Cat chases tiger.", "Lion visits mouse.", "Lion needs bald eagle.", "Rabbit visits mouse.", "Tiger likes bald eagle.", "Bear sees bear.", "If X is young then X is blue.", "If X is big then X is kind.", "If X visits rabbit then X is kind.", "If X is rough then X is nice.", "If X eats bald eagle then X is green.", "If X needs cow then X is red."], "assertion_statement": "Bald eagle is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::visits('lion', 'squirrel').", "1.0::visits('cow', 'squirrel').", "1.0::young('bald_eagle').", "1.0::kind('rabbit').", "1.0::likes('lion', 'cat').", "1.0::chases('squirrel', 'bald_eagle').", "1.0::nice('bald_eagle').", "1.0::chases('cat', 'tiger').", "1.0::visits('lion', 'mouse').", "1.0::needs('lion', 'bald_eagle').", "1.0::visits('rabbit', 'mouse').", "1.0::likes('tiger', 'bald_eagle').", "1.0::sees('bear', 'bear').", "1.0::blue(X) :- young(X).", "1.0::kind(X) :- big(X).", "1.0::kind(X) :- visits(X, 'rabbit').", "1.0::nice(X) :- rough(X).", "1.0::green(X) :- eats(X, 'bald_eagle').", "1.0::red(X) :- needs(X, 'cow')."], "assertion_statement": "query(blue('bald_eagle'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-45", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'cow'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'bear'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'mouse'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'dog'", "'cat'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'dog'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'tiger'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=11, probability=1.0, group=None, name=rough('tiger'), source=None) | 2: atom(identifier=(55, ('tiger',) {{}}, 0), probability=1.0, group=(55, ('tiger',) {{}}), name=choice(55,0,young('tiger'),'tiger'), source=None) | 3: conj(children=(1, 2), name=young('tiger')) | Queries :  young('tiger') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( likes 'mouse' 'bear' )", "[ + ( rough X ) ] -> + ( young X )", "+ ( sees 'bald_eagle' 'mouse' )", "+ ( needs 'dog' 'cat' )", "+ ( chases 'mouse' 'lion' )", "[ + ( green X ) ] -> + ( red X )", "+ ( sees 'cow' 'cow' )", "[ + ( sees X 'cow' ) ] -> + ( big X )", "+ ( rough 'tiger' )", "+ ( young 'dog' )", "+ ( visits 'cow' 'bear' )", "+ ( round 'bear' )", "+ ( visits 'squirrel' 'tiger' )", "[ + ( blue X ) , + ( nice X ) ] -> + ( big X )", "+ ( eats 'dog' 'cat' )", "+ ( likes 'cow' 'cat' )", "[ + ( likes X 'cow' ) ] -> + ( kind X )", "+ ( eats 'mouse' 'rabbit' )", "+ ( likes 'bear' 'rabbit' )", "+ ( nice 'mouse' )", "[ + ( needs X 'cat' ) ] -> + ( rough X )", "[ + ( sees X 'dog' ) ] -> + ( cold X )", "+ ( chases 'tiger' 'bald_eagle' )"], "assertion_statement": "+ ( young 'tiger' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bald eagle sees mouse.", "Tiger chases bald eagle.", "Mouse likes bear.", "Cow sees cow.", "Dog is young.", "Bear is round.", "Tiger is rough.", "Cow visits bear.", "Squirrel visits tiger.", "Dog needs cat.", "Mouse is nice.", "Cow likes cat.", "Mouse chases lion.", "Bear likes rabbit.", "Mouse eats rabbit.", "Dog eats cat.", "If X is blue or X is nice then X is big.", "If X sees dog then X is cold.", "If X sees cow then X is big.", "If X is rough then X is young.", "If X is green then X is red.", "If X likes cow then X is kind.", "If X needs cat then X is rough."], "assertion_statement": "Tiger is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('bald_eagle', 'mouse').", "1.0::chases('tiger', 'bald_eagle').", "1.0::likes('mouse', 'bear').", "1.0::sees('cow', 'cow').", "1.0::young('dog').", "1.0::round('bear').", "1.0::rough('tiger').", "1.0::visits('cow', 'bear').", "1.0::visits('squirrel', 'tiger').", "1.0::needs('dog', 'cat').", "1.0::nice('mouse').", "1.0::likes('cow', 'cat').", "1.0::chases('mouse', 'lion').", "1.0::likes('bear', 'rabbit').", "1.0::eats('mouse', 'rabbit').", "1.0::eats('dog', 'cat').", "1.0::big(X) :- blue(X); nice(X).", "1.0::cold(X) :- sees(X, 'dog').", "1.0::big(X) :- sees(X, 'cow').", "1.0::young(X) :- rough(X).", "1.0::red(X) :- green(X).", "1.0::kind(X) :- likes(X, 'cow').", "1.0::rough(X) :- needs(X, 'cat')."], "assertion_statement": "query(young('tiger'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-46", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'mouse'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'lion'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cow'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'rabbit'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'squirrel'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'dog'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'bear'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'bear'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cat'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'lion'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=2, probability=1.0, group=None, name=nice('lion'), source=None) | 2: atom(identifier=(43, ('lion',) {{}}, 0), probability=1.0, group=(43, ('lion',) {{}}), name=choice(43,0,young('lion'),'lion'), source=None) | 3: conj(children=(1, 2), name=young('lion')) | Queries :  young('lion') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( kind X ) ] -> + ( red X )", "+ ( cold 'dog' )", "+ ( rough 'mouse' )", "+ ( needs 'dog' 'mouse' )", "[ + ( needs X 'tiger' ) ] -> + ( red X )", "+ ( sees 'cat' 'lion' )", "+ ( likes 'mouse' 'lion' )", "[ + ( visits X 'squirrel' ) , + ( blue X ) ] -> + ( green X )", "+ ( eats 'squirrel' 'cow' )", "+ ( eats 'lion' 'lion' )", "[ + ( eats X 'cat' ) ] -> + ( blue X )", "+ ( visits 'rabbit' 'cow' )", "+ ( chases 'mouse' 'squirrel' )", "[ + ( chases X 'bear' ) ] -> + ( rough X )", "+ ( visits 'dog' 'mouse' )", "+ ( visits 'tiger' 'bear' )", "+ ( sees 'cow' 'bald_eagle' )", "[ + ( eats X 'tiger' ) , + ( cold X ) ] -> + ( rough X )", "[ + ( chases X 'cow' ) ] -> + ( blue X )", "+ ( chases 'rabbit' 'squirrel' )", "+ ( nice 'lion' )", "+ ( young 'rabbit' )", "+ ( sees 'bald_eagle' 'bald_eagle' )", "[ + ( nice X ) , + ( nice X ) ] -> + ( young X )"], "assertion_statement": "+ ( young 'lion' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Mouse chases squirrel.", "Lion is nice.", "Lion eats lion.", "Cow sees bald eagle.", "Mouse is rough.", "Rabbit visits cow.", "Cat sees lion.", "Rabbit chases squirrel.", "Dog needs mouse.", "Mouse likes lion.", "Bald eagle sees bald eagle.", "Squirrel eats cow.", "Dog visits mouse.", "Rabbit is young.", "Dog is cold.", "Tiger visits bear.", "If X chases bear then X is rough.", "If X chases cow then X is blue.", "If X is nice or X is nice then X is young.", "If X visits squirrel or X is blue then X is green.", "If X eats tiger or X is cold then X is rough.", "If X needs tiger then X is red.", "If X eats cat then X is blue.", "If X is kind then X is red."], "assertion_statement": "Lion is young."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::chases('mouse', 'squirrel').", "1.0::nice('lion').", "1.0::eats('lion', 'lion').", "1.0::sees('cow', 'bald_eagle').", "1.0::rough('mouse').", "1.0::visits('rabbit', 'cow').", "1.0::sees('cat', 'lion').", "1.0::chases('rabbit', 'squirrel').", "1.0::needs('dog', 'mouse').", "1.0::likes('mouse', 'lion').", "1.0::sees('bald_eagle', 'bald_eagle').", "1.0::eats('squirrel', 'cow').", "1.0::visits('dog', 'mouse').", "1.0::young('rabbit').", "1.0::cold('dog').", "1.0::visits('tiger', 'bear').", "1.0::rough(X) :- chases(X, 'bear').", "1.0::blue(X) :- chases(X, 'cow').", "1.0::young(X) :- nice(X); nice(X).", "1.0::green(X) :- visits(X, 'squirrel'); blue(X).", "1.0::rough(X) :- eats(X, 'tiger'); cold(X).", "1.0::red(X) :- needs(X, 'tiger').", "1.0::blue(X) :- eats(X, 'cat').", "1.0::red(X) :- kind(X)."], "assertion_statement": "query(young('lion'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-47", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'bear'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'squirrel'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cow'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bear'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'squirrel'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'dog'", "'squirrel'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "rough", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'lion'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'cow'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=13, probability=1.0, group=None, name=blue('cow'), source=None) | 2: atom(identifier=(34, ('cow',) {{}}, 0), probability=1.0, group=(34, ('cow',) {{}}), name=choice(34,0,green('cow'),'cow'), source=None) | 3: conj(children=(1, 2), name=green('cow')) | Queries :  green('cow') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["[ + ( eats X 'cow' ) ] -> + ( rough X )", "+ ( cold 'dog' )", "+ ( visits 'squirrel' 'dog' )", "+ ( visits 'bear' 'mouse' )", "[ + ( round X ) ] -> + ( round X )", "[ + ( eats X 'lion' ) ] -> + ( red X )", "+ ( chases 'cat' 'lion' )", "+ ( needs 'cat' 'squirrel' )", "+ ( green 'squirrel' )", "[ + ( blue X ) ] -> + ( green X )", "+ ( big 'squirrel' )", "+ ( needs 'bear' 'squirrel' )", "[ + ( chases X 'squirrel' ) ] -> + ( round X )", "+ ( needs 'cat' 'tiger' )", "+ ( blue 'cow' )", "[ + ( needs X 'rabbit' ) , + ( cold X ) ] -> + ( kind X )", "+ ( nice 'cat' )", "+ ( sees 'squirrel' 'mouse' )", "+ ( needs 'cow' 'squirrel' )", "+ ( needs 'dog' 'squirrel' )", "+ ( chases 'bald_eagle' 'bear' )", "+ ( needs 'cat' 'cow' )"], "assertion_statement": "+ ( green 'cow' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Cat is nice.", "Bear needs squirrel.", "Dog is cold.", "Cat needs squirrel.", "Squirrel visits dog.", "Cow needs squirrel.", "Cat chases lion.", "Bald eagle chases bear.", "Cow is blue.", "Squirrel is green.", "Squirrel is big.", "Bear visits mouse.", "Cat needs tiger.", "Cat needs cow.", "Squirrel sees mouse.", "Dog needs squirrel.", "If X chases squirrel then X is round.", "If X is blue then X is green.", "If X eats cow then X is rough.", "If X needs rabbit or X is cold then X is kind.", "If X eats lion then X is red.", "If X is round then X is round."], "assertion_statement": "Cow is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::nice('cat').", "1.0::needs('bear', 'squirrel').", "1.0::cold('dog').", "1.0::needs('cat', 'squirrel').", "1.0::visits('squirrel', 'dog').", "1.0::needs('cow', 'squirrel').", "1.0::chases('cat', 'lion').", "1.0::chases('bald_eagle', 'bear').", "1.0::blue('cow').", "1.0::green('squirrel').", "1.0::big('squirrel').", "1.0::visits('bear', 'mouse').", "1.0::needs('cat', 'tiger').", "1.0::needs('cat', 'cow').", "1.0::sees('squirrel', 'mouse').", "1.0::needs('dog', 'squirrel').", "1.0::round(X) :- chases(X, 'squirrel').", "1.0::green(X) :- blue(X).", "1.0::rough(X) :- eats(X, 'cow').", "1.0::kind(X) :- needs(X, 'rabbit'); cold(X).", "1.0::red(X) :- eats(X, 'lion').", "1.0::round(X) :- round(X)."], "assertion_statement": "query(green('cow'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-48", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'rabbit'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'bald_eagle'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'bald_eagle'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["'mouse'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'rabbit'", "'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'bald_eagle'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "green", "arguments": ["'mouse'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=5, probability=1.0, group=None, name=big('mouse'), source=None) | 2: atom(identifier=(20, ('mouse',) {{}}, 0), probability=1.0, group=(20, ('mouse',) {{}}), name=choice(20,0,green('mouse'),'mouse'), source=None) | 3: conj(children=(1, 2), name=green('mouse')) | Queries :  green('mouse') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( blue 'tiger' )", "[ + ( big X ) ] -> + ( green X )", "+ ( sees 'bald_eagle' 'cat' )", "+ ( green 'lion' )", "+ ( sees 'rabbit' 'cat' )", "+ ( blue 'squirrel' )", "+ ( cold 'bald_eagle' )", "+ ( big 'mouse' )", "+ ( eats 'bald_eagle' 'tiger' )", "+ ( visits 'tiger' 'squirrel' )", "+ ( likes 'mouse' 'tiger' )", "+ ( needs 'rabbit' 'mouse' )"], "assertion_statement": "+ ( green 'mouse' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Rabbit sees cat.", "Bald eagle sees cat.", "Tiger is blue.", "Mouse is big.", "Lion is green.", "Tiger visits squirrel.", "Bald eagle eats tiger.", "Mouse likes tiger.", "Rabbit needs mouse.", "Squirrel is blue.", "Bald eagle is cold.", "If X is big then X is green."], "assertion_statement": "Mouse is green."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('rabbit', 'cat').", "1.0::sees('bald_eagle', 'cat').", "1.0::blue('tiger').", "1.0::big('mouse').", "1.0::green('lion').", "1.0::visits('tiger', 'squirrel').", "1.0::eats('bald_eagle', 'tiger').", "1.0::likes('mouse', 'tiger').", "1.0::needs('rabbit', 'mouse').", "1.0::blue('squirrel').", "1.0::cold('bald_eagle').", "1.0::green(X) :- big(X)."], "assertion_statement": "query(green('mouse'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-49", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'tiger'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'cat'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'tiger'", "'squirrel'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'rabbit'", "'bald_eagle'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'rabbit'", "'rabbit'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "sees", "arguments": ["'mouse'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'cow'", "'tiger'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'bald_eagle'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["'rabbit'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=8, probability=1.0, group=None, name=eats('rabbit','bald_eagle'), source=None) | 2: atom(identifier=(12, ('rabbit',) {{}}, 0), probability=1.0, group=(12, ('rabbit',) {{}}), name=choice(12,0,cold('rabbit'),'rabbit'), source=None) | 3: conj(children=(1, 2), name=cold('rabbit')) | Queries :  cold('rabbit') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( sees 'mouse' 'tiger' )", "+ ( red 'bald_eagle' )", "+ ( sees 'mouse' 'bear' )", "+ ( eats 'rabbit' 'bald_eagle' )", "[ + ( eats X 'bald_eagle' ) ] -> + ( cold X )", "+ ( visits 'cow' 'tiger' )", "+ ( visits 'rabbit' 'rabbit' )", "+ ( visits 'tiger' 'squirrel' )", "+ ( eats 'rabbit' 'cat' )"], "assertion_statement": "+ ( cold 'rabbit' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Mouse sees tiger.", "Rabbit eats cat.", "Tiger visits squirrel.", "Bald eagle is red.", "Rabbit eats bald eagle.", "Rabbit visits rabbit.", "Mouse sees bear.", "Cow visits tiger.", "If X eats bald eagle then X is cold."], "assertion_statement": "Rabbit is cold."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::sees('mouse', 'tiger').", "1.0::eats('rabbit', 'cat').", "1.0::visits('tiger', 'squirrel').", "1.0::red('bald_eagle').", "1.0::eats('rabbit', 'bald_eagle').", "1.0::visits('rabbit', 'rabbit').", "1.0::sees('mouse', 'bear').", "1.0::visits('cow', 'tiger').", "1.0::cold(X) :- eats(X, 'bald_eagle')."], "assertion_statement": "query(cold('rabbit'))."}}}
{"json_class": "Example", "id": "ruletaker-problog-50", "theory_assertion_instance": {"json_class": "TheoryAssertionInstance", "theory": {"json_class": "Theory", "facts": [{"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["'cat'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'cat'", "'bear'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "young", "arguments": ["'mouse'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["'cat'", "'dog'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["'bald_eagle'", "'cow'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'bald_eagle'", "'lion'"], "probability": 1.0}, {"json_class": "Fact", "polarity": "+", "predicate": "chases", "arguments": ["'tiger'", "'squirrel'"], "probability": 1.0}], "rules": [{"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "likes", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "round", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'tiger'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "nice", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "cold", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "visits", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "red", "arguments": ["X"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "kind", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "eats", "arguments": ["X", "'cow'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}, {"json_class": "Rule", "lhs": [{"json_class": "Fact", "polarity": "+", "predicate": "needs", "arguments": ["X", "'squirrel'"], "probability": 1.0}], "rhs": {"json_class": "Fact", "polarity": "+", "predicate": "big", "arguments": ["X"], "probability": 1.0}, "probability": 1.0}]}, "assertion": {"json_class": "Fact", "polarity": "+", "predicate": "blue", "arguments": ["'bald_eagle'"], "probability": 1.0}, "label": true, "exception": null, "min_proof_depth": 1, "proof": "1: atom(identifier=9, probability=1.0, group=None, name=visits('bald_eagle','cow'), source=None) | 2: atom(identifier=(42, ('bald_eagle',) {{}}, 0), probability=1.0, group=(42, ('bald_eagle',) {{}}), name=choice(42,0,blue('bald_eagle'),'bald_eagle'), source=None) | 3: conj(children=(1, 2), name=blue('bald_eagle')) | Queries :  blue('bald_eagle') : 3 [query]"}, "logical_forms": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["+ ( chases 'tiger' 'squirrel' )", "[ + ( kind X ) ] -> + ( cold X )", "+ ( visits 'bald_eagle' 'cow' )", "[ + ( eats X 'cow' ) ] -> + ( big X )", "+ ( chases 'bald_eagle' 'lion' )", "+ ( needs 'cat' 'lion' )", "+ ( chases 'bald_eagle' 'dog' )", "[ + ( likes X 'cow' ) ] -> + ( round X )", "[ + ( red X ) ] -> + ( kind X )", "+ ( young 'mouse' )", "+ ( eats 'cat' 'dog' )", "+ ( chases 'cat' 'bear' )", "[ + ( needs X 'squirrel' ) ] -> + ( big X )", "[ + ( eats X 'tiger' ) ] -> + ( nice X )", "[ + ( visits X 'cow' ) ] -> + ( blue X )"], "assertion_statement": "+ ( blue 'bald_eagle' )"}, "english": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["Bald eagle chases dog.", "Cat needs lion.", "Cat chases bear.", "Mouse is young.", "Cat eats dog.", "Bald eagle visits cow.", "Bald eagle chases lion.", "Tiger chases squirrel.", "If X likes cow then X is round.", "If X eats tiger then X is nice.", "If X is kind then X is cold.", "If X visits cow then X is blue.", "If X is red then X is kind.", "If X eats cow then X is big.", "If X needs squirrel then X is big."], "assertion_statement": "Bald eagle is blue."}, "logic_program": {"problog": {"json_class": "TheoryAssertionRepresentation", "theory_statements": ["1.0::chases('bald_eagle', 'dog').", "1.0::needs('cat', 'lion').", "1.0::chases('cat', 'bear').", "1.0::young('mouse').", "1.0::eats('cat', 'dog').", "1.0::visits('bald_eagle', 'cow').", "1.0::chases('bald_eagle', 'lion').", "1.0::chases('tiger', 'squirrel').", "1.0::round(X) :- likes(X, 'cow').", "1.0::nice(X) :- eats(X, 'tiger').", "1.0::cold(X) :- kind(X).", "1.0::blue(X) :- visits(X, 'cow').", "1.0::kind(X) :- red(X).", "1.0::big(X) :- eats(X, 'cow').", "1.0::big(X) :- needs(X, 'squirrel')."], "assertion_statement": "query(blue('bald_eagle'))."}}}
